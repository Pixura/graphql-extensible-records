"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""All input for the create `Erc721Metadatum` mutation."""
input CreateErc721MetadatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Erc721Metadatum` to be created by this mutation."""
  erc721Metadatum: Erc721MetadatumInput!
}

"""The output of our create `Erc721Metadatum` mutation."""
type CreateErc721MetadatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Metadatum` that was created by this mutation."""
  erc721Metadatum: Erc721Metadatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `Erc721Metadatum`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `Erc721Metadatum`. May be used by Relay 1."""
  erc721MetadatumEdge(
    """The method to use when ordering `Erc721Metadatum`."""
    orderBy: [Erc721MetadataOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721MetadataEdge
}

"""All input for the create `Erc721Token` mutation."""
input CreateErc721TokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Erc721Token` to be created by this mutation."""
  erc721Token: Erc721TokenInput!
}

"""The output of our create `Erc721Token` mutation."""
type CreateErc721TokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Token` that was created by this mutation."""
  erc721Token: Erc721Token

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `Erc721Token`."""
  ethAddressUserByOwner: EthAddressUser

  """An edge for our `Erc721Token`. May be used by Relay 1."""
  erc721TokenEdge(
    """The method to use when ordering `Erc721Token`."""
    orderBy: [Erc721TokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721TokensEdge
}

"""All input for the create `Erc721Transfer` mutation."""
input CreateErc721TransferInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Erc721Transfer` to be created by this mutation."""
  erc721Transfer: Erc721TransferInput!
}

"""The output of our create `Erc721Transfer` mutation."""
type CreateErc721TransferPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Transfer` that was created by this mutation."""
  erc721Transfer: Erc721Transfer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByFrom: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByTo: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `Erc721Transfer`."""
  erc721TokenByTokenId: Erc721Token

  """Reads a single `EventDetail` that is related to this `Erc721Transfer`."""
  eventDetailById: EventDetail

  """An edge for our `Erc721Transfer`. May be used by Relay 1."""
  erc721TransferEdge(
    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721TransfersEdge
}

"""All input for the create `EthAddressUser` mutation."""
input CreateEthAddressUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EthAddressUser` to be created by this mutation."""
  ethAddressUser: EthAddressUserInput!
}

"""The output of our create `EthAddressUser` mutation."""
type CreateEthAddressUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EthAddressUser` that was created by this mutation."""
  ethAddressUser: EthAddressUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EthAddressUser`."""
  userByUserAddress: User

  """An edge for our `EthAddressUser`. May be used by Relay 1."""
  ethAddressUserEdge(
    """The method to use when ordering `EthAddressUser`."""
    orderBy: [EthAddressUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EthAddressUsersEdge
}

"""All input for the create `EventDetail` mutation."""
input CreateEventDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventDetail` to be created by this mutation."""
  eventDetail: EventDetailInput!
}

"""The output of our create `EventDetail` mutation."""
type CreateEventDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventDetail` that was created by this mutation."""
  eventDetail: EventDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `EventDetail`. May be used by Relay 1."""
  eventDetailEdge(
    """The method to use when ordering `EventDetail`."""
    orderBy: [EventDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventDetailsEdge
}

"""All input for the create `FlywaySchemaHistory` mutation."""
input CreateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` to be created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistoryInput!
}

"""The output of our create `FlywaySchemaHistory` mutation."""
type CreateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""All input for the create `HeraldEvent` mutation."""
input CreateHeraldEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HeraldEvent` to be created by this mutation."""
  heraldEvent: HeraldEventInput!
}

"""The output of our create `HeraldEvent` mutation."""
type CreateHeraldEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HeraldEvent` that was created by this mutation."""
  heraldEvent: HeraldEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HeraldEvent`. May be used by Relay 1."""
  heraldEventEdge(
    """The method to use when ordering `HeraldEvent`."""
    orderBy: [HeraldEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeraldEventsEdge
}

"""All input for the create `NftLike` mutation."""
input CreateNftLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NftLike` to be created by this mutation."""
  nftLike: NftLikeInput!
}

"""The output of our create `NftLike` mutation."""
type CreateNftLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NftLike` that was created by this mutation."""
  nftLike: NftLike

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `NftLike`."""
  userByAddress: User

  """An edge for our `NftLike`. May be used by Relay 1."""
  nftLikeEdge(
    """The method to use when ordering `NftLike`."""
    orderBy: [NftLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NftLikesEdge
}

"""All input for the create `NftView` mutation."""
input CreateNftViewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NftView` to be created by this mutation."""
  nftView: NftViewInput!
}

"""The output of our create `NftView` mutation."""
type CreateNftViewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NftView` that was created by this mutation."""
  nftView: NftView

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NftView`. May be used by Relay 1."""
  nftViewEdge(
    """The method to use when ordering `NftView`."""
    orderBy: [NftViewsOrderBy!] = [NATURAL]
  ): NftViewsEdge
}

"""All input for the create `SegmentNotification` mutation."""
input CreateSegmentNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SegmentNotification` to be created by this mutation."""
  segmentNotification: SegmentNotificationInput!
}

"""The output of our create `SegmentNotification` mutation."""
type CreateSegmentNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SegmentNotification` that was created by this mutation."""
  segmentNotification: SegmentNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SegmentNotification`. May be used by Relay 1."""
  segmentNotificationEdge(
    """The method to use when ordering `SegmentNotification`."""
    orderBy: [SegmentNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SegmentNotificationsEdge
}

"""All input for the create `SentEmailNotification` mutation."""
input CreateSentEmailNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SentEmailNotification` to be created by this mutation."""
  sentEmailNotification: SentEmailNotificationInput!
}

"""The output of our create `SentEmailNotification` mutation."""
type CreateSentEmailNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SentEmailNotification` that was created by this mutation."""
  sentEmailNotification: SentEmailNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SentEmailNotification`."""
  userByUserId: User

  """An edge for our `SentEmailNotification`. May be used by Relay 1."""
  sentEmailNotificationEdge(
    """The method to use when ordering `SentEmailNotification`."""
    orderBy: [SentEmailNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SentEmailNotificationsEdge
}

"""All input for the create `SuperRareAcceptBid` mutation."""
input CreateSuperRareAcceptBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareAcceptBid` to be created by this mutation."""
  superRareAcceptBid: SuperRareAcceptBidInput!
}

"""The output of our create `SuperRareAcceptBid` mutation."""
type CreateSuperRareAcceptBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareAcceptBid` that was created by this mutation."""
  superRareAcceptBid: SuperRareAcceptBid

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAcceptBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareAcceptBid`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareAcceptBid`. May be used by Relay 1."""
  superRareAcceptBidEdge(
    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareAcceptBidsEdge
}

"""All input for the create `SuperRareAuctionDetail` mutation."""
input CreateSuperRareAuctionDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareAuctionDetail` to be created by this mutation."""
  superRareAuctionDetail: SuperRareAuctionDetailInput!
}

"""The output of our create `SuperRareAuctionDetail` mutation."""
type CreateSuperRareAuctionDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareAuctionDetail` that was created by this mutation."""
  superRareAuctionDetail: SuperRareAuctionDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAuctionDetail`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareAuctionDetail`. May be used by Relay 1."""
  superRareAuctionDetailEdge(
    """The method to use when ordering `SuperRareAuctionDetail`."""
    orderBy: [SuperRareAuctionDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareAuctionDetailsEdge
}

"""All input for the create `SuperRareBid` mutation."""
input CreateSuperRareBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareBid` to be created by this mutation."""
  superRareBid: SuperRareBidInput!
}

"""The output of our create `SuperRareBid` mutation."""
type CreateSuperRareBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareBid` that was created by this mutation."""
  superRareBid: SuperRareBid

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareBid`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareBid`."""
  eventDetailById: EventDetail

  """An edge for our `SuperRareBid`. May be used by Relay 1."""
  superRareBidEdge(
    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareBidsEdge
}

"""All input for the create `SuperRareCancelBid` mutation."""
input CreateSuperRareCancelBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareCancelBid` to be created by this mutation."""
  superRareCancelBid: SuperRareCancelBidInput!
}

"""The output of our create `SuperRareCancelBid` mutation."""
type CreateSuperRareCancelBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareCancelBid` that was created by this mutation."""
  superRareCancelBid: SuperRareCancelBid

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareCancelBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareCancelBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareCancelBid`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareCancelBid`. May be used by Relay 1."""
  superRareCancelBidEdge(
    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareCancelBidsEdge
}

"""All input for the create `SuperRareEdition` mutation."""
input CreateSuperRareEditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareEdition` to be created by this mutation."""
  superRareEdition: SuperRareEditionInput!
}

"""The output of our create `SuperRareEdition` mutation."""
type CreateSuperRareEditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareEdition` that was created by this mutation."""
  superRareEdition: SuperRareEdition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEdition`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareEdition`. May be used by Relay 1."""
  superRareEditionEdge(
    """The method to use when ordering `SuperRareEdition`."""
    orderBy: [SuperRareEditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareEditionsEdge
}

"""All input for the create `SuperRareEstimatedValue` mutation."""
input CreateSuperRareEstimatedValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareEstimatedValue` to be created by this mutation."""
  superRareEstimatedValue: SuperRareEstimatedValueInput!
}

"""The output of our create `SuperRareEstimatedValue` mutation."""
type CreateSuperRareEstimatedValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareEstimatedValue` that was created by this mutation."""
  superRareEstimatedValue: SuperRareEstimatedValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEstimatedValue`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareEstimatedValue`. May be used by Relay 1."""
  superRareEstimatedValueEdge(
    """The method to use when ordering `SuperRareEstimatedValue`."""
    orderBy: [SuperRareEstimatedValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareEstimatedValuesEdge
}

"""All input for the create `SuperRareMarketDetail` mutation."""
input CreateSuperRareMarketDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareMarketDetail` to be created by this mutation."""
  superRareMarketDetail: SuperRareMarketDetailInput!
}

"""The output of our create `SuperRareMarketDetail` mutation."""
type CreateSuperRareMarketDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareMarketDetail` that was created by this mutation."""
  superRareMarketDetail: SuperRareMarketDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareMarketDetail`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareMarketDetail`. May be used by Relay 1."""
  superRareMarketDetailEdge(
    """The method to use when ordering `SuperRareMarketDetail`."""
    orderBy: [SuperRareMarketDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareMarketDetailsEdge
}

"""All input for the create `SuperRareSalePriceSet` mutation."""
input CreateSuperRareSalePriceSetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareSalePriceSet` to be created by this mutation."""
  superRareSalePriceSet: SuperRareSalePriceSetInput!
}

"""The output of our create `SuperRareSalePriceSet` mutation."""
type CreateSuperRareSalePriceSetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSalePriceSet` that was created by this mutation."""
  superRareSalePriceSet: SuperRareSalePriceSet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSalePriceSet`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EventDetail` that is related to this `SuperRareSalePriceSet`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareSalePriceSet`. May be used by Relay 1."""
  superRareSalePriceSetEdge(
    """The method to use when ordering `SuperRareSalePriceSet`."""
    orderBy: [SuperRareSalePriceSetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSalePriceSetsEdge
}

"""All input for the create `SuperRareSizedImage` mutation."""
input CreateSuperRareSizedImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareSizedImage` to be created by this mutation."""
  superRareSizedImage: SuperRareSizedImageInput!
}

"""The output of our create `SuperRareSizedImage` mutation."""
type CreateSuperRareSizedImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSizedImage` that was created by this mutation."""
  superRareSizedImage: SuperRareSizedImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSizedImage`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareSizedImage`. May be used by Relay 1."""
  superRareSizedImageEdge(
    """The method to use when ordering `SuperRareSizedImage`."""
    orderBy: [SuperRareSizedImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSizedImagesEdge
}

"""All input for the create `SuperRareSold` mutation."""
input CreateSuperRareSoldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareSold` to be created by this mutation."""
  superRareSold: SuperRareSoldInput!
}

"""The output of our create `SuperRareSold` mutation."""
type CreateSuperRareSoldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSold` that was created by this mutation."""
  superRareSold: SuperRareSold

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareSold`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserByBuyer: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareSold`."""
  eventDetailById: EventDetail

  """An edge for our `SuperRareSold`. May be used by Relay 1."""
  superRareSoldEdge(
    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSoldsEdge
}

"""All input for the create `SuperRareTag` mutation."""
input CreateSuperRareTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareTag` to be created by this mutation."""
  superRareTag: SuperRareTagInput!
}

"""The output of our create `SuperRareTag` mutation."""
type CreateSuperRareTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareTag` that was created by this mutation."""
  superRareTag: SuperRareTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareTag`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareTag`. May be used by Relay 1."""
  superRareTagEdge(
    """The method to use when ordering `SuperRareTag`."""
    orderBy: [SuperRareTagsOrderBy!] = [NATURAL]
  ): SuperRareTagsEdge
}

"""All input for the create `SuperRareTokenCreator` mutation."""
input CreateSuperRareTokenCreatorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SuperRareTokenCreator` to be created by this mutation."""
  superRareTokenCreator: SuperRareTokenCreatorInput!
}

"""The output of our create `SuperRareTokenCreator` mutation."""
type CreateSuperRareTokenCreatorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareTokenCreator` that was created by this mutation."""
  superRareTokenCreator: SuperRareTokenCreator

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareTokenCreator`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareTokenCreator`.
  """
  ethAddressUserByAddress: EthAddressUser

  """An edge for our `SuperRareTokenCreator`. May be used by Relay 1."""
  superRareTokenCreatorEdge(
    """The method to use when ordering `SuperRareTokenCreator`."""
    orderBy: [SuperRareTokenCreatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareTokenCreatorsEdge
}

"""All input for the create `TokenLike` mutation."""
input CreateTokenLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TokenLike` to be created by this mutation."""
  tokenLike: TokenLikeInput!
}

"""The output of our create `TokenLike` mutation."""
type CreateTokenLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TokenLike` that was created by this mutation."""
  tokenLike: TokenLike

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `TokenLike`."""
  ethAddressUserByAddress: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `TokenLike`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `TokenLike`. May be used by Relay 1."""
  tokenLikeEdge(
    """The method to use when ordering `TokenLike`."""
    orderBy: [TokenLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TokenLikesEdge
}

"""All input for the create `TokenView` mutation."""
input CreateTokenViewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TokenView` to be created by this mutation."""
  tokenView: TokenViewInput!
}

"""The output of our create `TokenView` mutation."""
type CreateTokenViewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TokenView` that was created by this mutation."""
  tokenView: TokenView

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `TokenView`."""
  ethAddressUserByAddress: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `TokenView`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `TokenView`. May be used by Relay 1."""
  tokenViewEdge(
    """The method to use when ordering `TokenView`."""
    orderBy: [TokenViewsOrderBy!] = [NATURAL]
  ): TokenViewsEdge
}

"""All input for the create `UserAppNotification` mutation."""
input CreateUserAppNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAppNotification` to be created by this mutation."""
  userAppNotification: UserAppNotificationInput!
}

"""The output of our create `UserAppNotification` mutation."""
type CreateUserAppNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAppNotification` that was created by this mutation."""
  userAppNotification: UserAppNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAppNotification`."""
  userByUserId: User

  """An edge for our `UserAppNotification`. May be used by Relay 1."""
  userAppNotificationEdge(
    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAppNotificationsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""All input for the create `UserNotificationSetting` mutation."""
input CreateUserNotificationSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserNotificationSetting` to be created by this mutation."""
  userNotificationSetting: UserNotificationSettingInput!
}

"""The output of our create `UserNotificationSetting` mutation."""
type CreateUserNotificationSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserNotificationSetting` that was created by this mutation."""
  userNotificationSetting: UserNotificationSetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `UserNotificationSetting`.
  """
  userByUserId: User

  """An edge for our `UserNotificationSetting`. May be used by Relay 1."""
  userNotificationSettingEdge(
    """The method to use when ordering `UserNotificationSetting`."""
    orderBy: [UserNotificationSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserNotificationSettingsEdge
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `UserTracking` mutation."""
input CreateUserTrackingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserTracking` to be created by this mutation."""
  userTracking: UserTrackingInput!
}

"""The output of our create `UserTracking` mutation."""
type CreateUserTrackingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTracking` that was created by this mutation."""
  userTracking: UserTracking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserTracking`. May be used by Relay 1."""
  userTrackingEdge(
    """The method to use when ordering `UserTracking`."""
    orderBy: [UserTrackingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTrackingsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""All input for the `deleteErc721MetadatumByTokenId` mutation."""
input DeleteErc721MetadatumByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteErc721Metadatum` mutation."""
input DeleteErc721MetadatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Erc721Metadatum` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Erc721Metadatum` mutation."""
type DeleteErc721MetadatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Metadatum` that was deleted by this mutation."""
  erc721Metadatum: Erc721Metadatum
  deletedErc721MetadatumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `Erc721Metadatum`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `Erc721Metadatum`. May be used by Relay 1."""
  erc721MetadatumEdge(
    """The method to use when ordering `Erc721Metadatum`."""
    orderBy: [Erc721MetadataOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721MetadataEdge
}

"""All input for the `deleteErc721TokenByTokenId` mutation."""
input DeleteErc721TokenByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteErc721Token` mutation."""
input DeleteErc721TokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Erc721Token` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Erc721Token` mutation."""
type DeleteErc721TokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Token` that was deleted by this mutation."""
  erc721Token: Erc721Token
  deletedErc721TokenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `Erc721Token`."""
  ethAddressUserByOwner: EthAddressUser

  """An edge for our `Erc721Token`. May be used by Relay 1."""
  erc721TokenEdge(
    """The method to use when ordering `Erc721Token`."""
    orderBy: [Erc721TokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721TokensEdge
}

"""All input for the `deleteErc721TransferById` mutation."""
input DeleteErc721TransferByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteErc721Transfer` mutation."""
input DeleteErc721TransferInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Erc721Transfer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Erc721Transfer` mutation."""
type DeleteErc721TransferPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Transfer` that was deleted by this mutation."""
  erc721Transfer: Erc721Transfer
  deletedErc721TransferId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByFrom: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByTo: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `Erc721Transfer`."""
  erc721TokenByTokenId: Erc721Token

  """Reads a single `EventDetail` that is related to this `Erc721Transfer`."""
  eventDetailById: EventDetail

  """An edge for our `Erc721Transfer`. May be used by Relay 1."""
  erc721TransferEdge(
    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721TransfersEdge
}

"""All input for the `deleteEthAddressUserByEthAddress` mutation."""
input DeleteEthAddressUserByEthAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ethAddress: String!
}

"""All input for the `deleteEthAddressUserByUserAddress` mutation."""
input DeleteEthAddressUserByUserAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userAddress: String!
}

"""All input for the `deleteEthAddressUser` mutation."""
input DeleteEthAddressUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EthAddressUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EthAddressUser` mutation."""
type DeleteEthAddressUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EthAddressUser` that was deleted by this mutation."""
  ethAddressUser: EthAddressUser
  deletedEthAddressUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EthAddressUser`."""
  userByUserAddress: User

  """An edge for our `EthAddressUser`. May be used by Relay 1."""
  ethAddressUserEdge(
    """The method to use when ordering `EthAddressUser`."""
    orderBy: [EthAddressUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EthAddressUsersEdge
}

"""All input for the `deleteEventDetailById` mutation."""
input DeleteEventDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteEventDetail` mutation."""
input DeleteEventDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventDetail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EventDetail` mutation."""
type DeleteEventDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventDetail` that was deleted by this mutation."""
  eventDetail: EventDetail
  deletedEventDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `EventDetail`. May be used by Relay 1."""
  eventDetailEdge(
    """The method to use when ordering `EventDetail`."""
    orderBy: [EventDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventDetailsEdge
}

"""All input for the `deleteFlywaySchemaHistoryByInstalledRank` mutation."""
input DeleteFlywaySchemaHistoryByInstalledRankInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  installedRank: Int!
}

"""All input for the `deleteFlywaySchemaHistory` mutation."""
input DeleteFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `FlywaySchemaHistory` mutation."""
type DeleteFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was deleted by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory
  deletedFlywaySchemaHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""
All input for the `deleteHeraldEventByEventIdAndNotifierType` mutation.
"""
input DeleteHeraldEventByEventIdAndNotifierTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The event id. For blockchain transactions it is the block hash appended with the log index.
  """
  eventId: String!

  """The notifier that processed the event"""
  notifierType: HeraldNotifierType!
}

"""All input for the `deleteHeraldEventById` mutation."""
input DeleteHeraldEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id of the herald event."""
  id: BigInt!
}

"""All input for the `deleteHeraldEvent` mutation."""
input DeleteHeraldEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HeraldEvent` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HeraldEvent` mutation."""
type DeleteHeraldEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HeraldEvent` that was deleted by this mutation."""
  heraldEvent: HeraldEvent
  deletedHeraldEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HeraldEvent`. May be used by Relay 1."""
  heraldEventEdge(
    """The method to use when ordering `HeraldEvent`."""
    orderBy: [HeraldEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeraldEventsEdge
}

"""
All input for the `deleteNftLikeByAddressAndTokenIdAndContractAddress` mutation.
"""
input DeleteNftLikeByAddressAndTokenIdAndContractAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  address: String!
  tokenId: Float!
  contractAddress: String!
}

"""All input for the `deleteNftLike` mutation."""
input DeleteNftLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NftLike` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NftLike` mutation."""
type DeleteNftLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NftLike` that was deleted by this mutation."""
  nftLike: NftLike
  deletedNftLikeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `NftLike`."""
  userByAddress: User

  """An edge for our `NftLike`. May be used by Relay 1."""
  nftLikeEdge(
    """The method to use when ordering `NftLike`."""
    orderBy: [NftLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NftLikesEdge
}

"""
All input for the `deleteNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreated` mutation.
"""
input DeleteNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreatedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fingerprint: String!
  tokenId: Float!
  contractAddress: String!
  dayCreated: Date!
}

"""The output of our delete `NftView` mutation."""
type DeleteNftViewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NftView` that was deleted by this mutation."""
  nftView: NftView
  deletedNftViewId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NftView`. May be used by Relay 1."""
  nftViewEdge(
    """The method to use when ordering `NftView`."""
    orderBy: [NftViewsOrderBy!] = [NATURAL]
  ): NftViewsEdge
}

"""All input for the `deleteSegmentNotificationById` mutation."""
input DeleteSegmentNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id of the Segment notification."""
  id: BigInt!
}

"""All input for the `deleteSegmentNotificationByNftEventId` mutation."""
input DeleteSegmentNotificationByNftEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The nft event id tracked by Segmemt. It is the block hash appended with the log index.
  """
  nftEventId: String!
}

"""All input for the `deleteSegmentNotificationByUserId` mutation."""
input DeleteSegmentNotificationByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The user id identified."""
  userId: BigInt!
}

"""All input for the `deleteSegmentNotification` mutation."""
input DeleteSegmentNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SegmentNotification` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SegmentNotification` mutation."""
type DeleteSegmentNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SegmentNotification` that was deleted by this mutation."""
  segmentNotification: SegmentNotification
  deletedSegmentNotificationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SegmentNotification`. May be used by Relay 1."""
  segmentNotificationEdge(
    """The method to use when ordering `SegmentNotification`."""
    orderBy: [SegmentNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SegmentNotificationsEdge
}

"""All input for the `deleteSentEmailNotificationById` mutation."""
input DeleteSentEmailNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id of the email notification."""
  id: BigInt!
}

"""
All input for the `deleteSentEmailNotificationByNftEventIdAndNotificationTypeAndUserId` mutation.
"""
input DeleteSentEmailNotificationByNftEventIdAndNotificationTypeAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The nft event id that caused the email to be sent. It is the block hash appended with the log index.
  """
  nftEventId: String!

  """The type of email notification sent."""
  notificationType: UserNotificationType!

  """The user id of the user to whom the email was sent."""
  userId: BigInt!
}

"""All input for the `deleteSentEmailNotification` mutation."""
input DeleteSentEmailNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SentEmailNotification` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SentEmailNotification` mutation."""
type DeleteSentEmailNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SentEmailNotification` that was deleted by this mutation."""
  sentEmailNotification: SentEmailNotification
  deletedSentEmailNotificationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SentEmailNotification`."""
  userByUserId: User

  """An edge for our `SentEmailNotification`. May be used by Relay 1."""
  sentEmailNotificationEdge(
    """The method to use when ordering `SentEmailNotification`."""
    orderBy: [SentEmailNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SentEmailNotificationsEdge
}

"""All input for the `deleteSuperRareAcceptBidById` mutation."""
input DeleteSuperRareAcceptBidByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteSuperRareAcceptBid` mutation."""
input DeleteSuperRareAcceptBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareAcceptBid` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareAcceptBid` mutation."""
type DeleteSuperRareAcceptBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareAcceptBid` that was deleted by this mutation."""
  superRareAcceptBid: SuperRareAcceptBid
  deletedSuperRareAcceptBidId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAcceptBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareAcceptBid`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareAcceptBid`. May be used by Relay 1."""
  superRareAcceptBidEdge(
    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareAcceptBidsEdge
}

"""All input for the `deleteSuperRareAuctionDetailByTokenId` mutation."""
input DeleteSuperRareAuctionDetailByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteSuperRareAuctionDetail` mutation."""
input DeleteSuperRareAuctionDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareAuctionDetail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareAuctionDetail` mutation."""
type DeleteSuperRareAuctionDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareAuctionDetail` that was deleted by this mutation."""
  superRareAuctionDetail: SuperRareAuctionDetail
  deletedSuperRareAuctionDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAuctionDetail`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareAuctionDetail`. May be used by Relay 1."""
  superRareAuctionDetailEdge(
    """The method to use when ordering `SuperRareAuctionDetail`."""
    orderBy: [SuperRareAuctionDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareAuctionDetailsEdge
}

"""All input for the `deleteSuperRareBidById` mutation."""
input DeleteSuperRareBidByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteSuperRareBid` mutation."""
input DeleteSuperRareBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareBid` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareBid` mutation."""
type DeleteSuperRareBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareBid` that was deleted by this mutation."""
  superRareBid: SuperRareBid
  deletedSuperRareBidId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareBid`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareBid`."""
  eventDetailById: EventDetail

  """An edge for our `SuperRareBid`. May be used by Relay 1."""
  superRareBidEdge(
    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareBidsEdge
}

"""All input for the `deleteSuperRareCancelBidById` mutation."""
input DeleteSuperRareCancelBidByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteSuperRareCancelBid` mutation."""
input DeleteSuperRareCancelBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareCancelBid` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareCancelBid` mutation."""
type DeleteSuperRareCancelBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareCancelBid` that was deleted by this mutation."""
  superRareCancelBid: SuperRareCancelBid
  deletedSuperRareCancelBidId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareCancelBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareCancelBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareCancelBid`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareCancelBid`. May be used by Relay 1."""
  superRareCancelBidEdge(
    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareCancelBidsEdge
}

"""All input for the `deleteSuperRareEditionByTokenId` mutation."""
input DeleteSuperRareEditionByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteSuperRareEdition` mutation."""
input DeleteSuperRareEditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareEdition` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareEdition` mutation."""
type DeleteSuperRareEditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareEdition` that was deleted by this mutation."""
  superRareEdition: SuperRareEdition
  deletedSuperRareEditionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEdition`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareEdition`. May be used by Relay 1."""
  superRareEditionEdge(
    """The method to use when ordering `SuperRareEdition`."""
    orderBy: [SuperRareEditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareEditionsEdge
}

"""All input for the `deleteSuperRareEstimatedValueByTokenId` mutation."""
input DeleteSuperRareEstimatedValueByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteSuperRareEstimatedValue` mutation."""
input DeleteSuperRareEstimatedValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareEstimatedValue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareEstimatedValue` mutation."""
type DeleteSuperRareEstimatedValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareEstimatedValue` that was deleted by this mutation."""
  superRareEstimatedValue: SuperRareEstimatedValue
  deletedSuperRareEstimatedValueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEstimatedValue`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareEstimatedValue`. May be used by Relay 1."""
  superRareEstimatedValueEdge(
    """The method to use when ordering `SuperRareEstimatedValue`."""
    orderBy: [SuperRareEstimatedValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareEstimatedValuesEdge
}

"""All input for the `deleteSuperRareMarketDetailByTokenId` mutation."""
input DeleteSuperRareMarketDetailByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteSuperRareMarketDetail` mutation."""
input DeleteSuperRareMarketDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareMarketDetail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareMarketDetail` mutation."""
type DeleteSuperRareMarketDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareMarketDetail` that was deleted by this mutation."""
  superRareMarketDetail: SuperRareMarketDetail
  deletedSuperRareMarketDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareMarketDetail`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareMarketDetail`. May be used by Relay 1."""
  superRareMarketDetailEdge(
    """The method to use when ordering `SuperRareMarketDetail`."""
    orderBy: [SuperRareMarketDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareMarketDetailsEdge
}

"""All input for the `deleteSuperRareSalePriceSetById` mutation."""
input DeleteSuperRareSalePriceSetByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteSuperRareSalePriceSet` mutation."""
input DeleteSuperRareSalePriceSetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareSalePriceSet` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareSalePriceSet` mutation."""
type DeleteSuperRareSalePriceSetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSalePriceSet` that was deleted by this mutation."""
  superRareSalePriceSet: SuperRareSalePriceSet
  deletedSuperRareSalePriceSetId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSalePriceSet`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EventDetail` that is related to this `SuperRareSalePriceSet`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareSalePriceSet`. May be used by Relay 1."""
  superRareSalePriceSetEdge(
    """The method to use when ordering `SuperRareSalePriceSet`."""
    orderBy: [SuperRareSalePriceSetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSalePriceSetsEdge
}

"""All input for the `deleteSuperRareSizedImageByTokenId` mutation."""
input DeleteSuperRareSizedImageByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteSuperRareSizedImage` mutation."""
input DeleteSuperRareSizedImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareSizedImage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareSizedImage` mutation."""
type DeleteSuperRareSizedImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSizedImage` that was deleted by this mutation."""
  superRareSizedImage: SuperRareSizedImage
  deletedSuperRareSizedImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSizedImage`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareSizedImage`. May be used by Relay 1."""
  superRareSizedImageEdge(
    """The method to use when ordering `SuperRareSizedImage`."""
    orderBy: [SuperRareSizedImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSizedImagesEdge
}

"""All input for the `deleteSuperRareSoldById` mutation."""
input DeleteSuperRareSoldByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteSuperRareSold` mutation."""
input DeleteSuperRareSoldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareSold` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareSold` mutation."""
type DeleteSuperRareSoldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSold` that was deleted by this mutation."""
  superRareSold: SuperRareSold
  deletedSuperRareSoldId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareSold`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserByBuyer: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareSold`."""
  eventDetailById: EventDetail

  """An edge for our `SuperRareSold`. May be used by Relay 1."""
  superRareSoldEdge(
    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSoldsEdge
}

"""All input for the `deleteSuperRareTagByTokenIdAndName` mutation."""
input DeleteSuperRareTagByTokenIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
  name: String!
}

"""The output of our delete `SuperRareTag` mutation."""
type DeleteSuperRareTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareTag` that was deleted by this mutation."""
  superRareTag: SuperRareTag
  deletedSuperRareTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareTag`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareTag`. May be used by Relay 1."""
  superRareTagEdge(
    """The method to use when ordering `SuperRareTag`."""
    orderBy: [SuperRareTagsOrderBy!] = [NATURAL]
  ): SuperRareTagsEdge
}

"""All input for the `deleteSuperRareTokenCreatorByTokenId` mutation."""
input DeleteSuperRareTokenCreatorByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tokenId: Float!
}

"""All input for the `deleteSuperRareTokenCreator` mutation."""
input DeleteSuperRareTokenCreatorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareTokenCreator` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SuperRareTokenCreator` mutation."""
type DeleteSuperRareTokenCreatorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareTokenCreator` that was deleted by this mutation."""
  superRareTokenCreator: SuperRareTokenCreator
  deletedSuperRareTokenCreatorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareTokenCreator`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareTokenCreator`.
  """
  ethAddressUserByAddress: EthAddressUser

  """An edge for our `SuperRareTokenCreator`. May be used by Relay 1."""
  superRareTokenCreatorEdge(
    """The method to use when ordering `SuperRareTokenCreator`."""
    orderBy: [SuperRareTokenCreatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareTokenCreatorsEdge
}

"""All input for the `deleteTokenLikeByAddressAndTokenId` mutation."""
input DeleteTokenLikeByAddressAndTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  address: String!
  tokenId: Float!
}

"""All input for the `deleteTokenLike` mutation."""
input DeleteTokenLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TokenLike` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TokenLike` mutation."""
type DeleteTokenLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TokenLike` that was deleted by this mutation."""
  tokenLike: TokenLike
  deletedTokenLikeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `TokenLike`."""
  ethAddressUserByAddress: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `TokenLike`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `TokenLike`. May be used by Relay 1."""
  tokenLikeEdge(
    """The method to use when ordering `TokenLike`."""
    orderBy: [TokenLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TokenLikesEdge
}

"""All input for the `deleteUserAppNotificationById` mutation."""
input DeleteUserAppNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id notification"""
  id: BigInt!
}

"""All input for the `deleteUserAppNotification` mutation."""
input DeleteUserAppNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAppNotification` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserAppNotification` mutation."""
type DeleteUserAppNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAppNotification` that was deleted by this mutation."""
  userAppNotification: UserAppNotification
  deletedUserAppNotificationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAppNotification`."""
  userByUserId: User

  """An edge for our `UserAppNotification`. May be used by Relay 1."""
  userAppNotificationEdge(
    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAppNotificationsEdge
}

"""All input for the `deleteUserByEthaddress` mutation."""
input DeleteUserByEthaddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ethaddress: String!
}

"""All input for the `deleteUserByEthereumAddress` mutation."""
input DeleteUserByEthereumAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ethereumAddress: String!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserNotificationSettingById` mutation."""
input DeleteUserNotificationSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id of the notification settings"""
  id: BigInt!
}

"""All input for the `deleteUserNotificationSettingByUserId` mutation."""
input DeleteUserNotificationSettingByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The user id the settings are for"""
  userId: BigInt!
}

"""All input for the `deleteUserNotificationSetting` mutation."""
input DeleteUserNotificationSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserNotificationSetting` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserNotificationSetting` mutation."""
type DeleteUserNotificationSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserNotificationSetting` that was deleted by this mutation."""
  userNotificationSetting: UserNotificationSetting
  deletedUserNotificationSettingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `UserNotificationSetting`.
  """
  userByUserId: User

  """An edge for our `UserNotificationSetting`. May be used by Relay 1."""
  userNotificationSettingEdge(
    """The method to use when ordering `UserNotificationSetting`."""
    orderBy: [UserNotificationSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserNotificationSettingsEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserTrackingByRefidAndTokenid` mutation."""
input DeleteUserTrackingByRefidAndTokenidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  refid: String!
  tokenid: Float!
}

"""All input for the `deleteUserTracking` mutation."""
input DeleteUserTrackingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserTracking` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserTracking` mutation."""
type DeleteUserTrackingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTracking` that was deleted by this mutation."""
  userTracking: UserTracking
  deletedUserTrackingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserTracking`. May be used by Relay 1."""
  userTrackingEdge(
    """The method to use when ordering `UserTracking`."""
    orderBy: [UserTrackingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTrackingsEdge
}

"""A connection to a list of `Erc721Metadatum` values."""
type Erc721MetadataConnection {
  """A list of `Erc721Metadatum` objects."""
  nodes: [Erc721Metadatum]!

  """
  A list of edges which contains the `Erc721Metadatum` and cursor to aid in pagination.
  """
  edges: [Erc721MetadataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `Erc721Metadatum` you could get from the connection.
  """
  totalCount: Int!
}

"""A `Erc721Metadatum` edge in the connection."""
type Erc721MetadataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Erc721Metadatum` at the end of the edge."""
  node: Erc721Metadatum
}

"""Methods to use when ordering `Erc721Metadatum`."""
enum Erc721MetadataOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  COLLECTION_NAME_ASC
  COLLECTION_NAME_DESC
  COLLECTION_SYMBOL_ASC
  COLLECTION_SYMBOL_DESC
  METADATA_URI_ASC
  METADATA_URI_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_URI_ASC
  IMAGE_URI_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type Erc721Metadatum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  collectionName: String!
  collectionSymbol: String!
  metadataUri: String!
  name: String!
  description: String!
  imageUri: String!

  """
  Reads a single `Erc721Token` that is related to this `Erc721Metadatum`.
  """
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `Erc721Metadatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input Erc721MetadatumCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `collectionName` field."""
  collectionName: String

  """Checks for equality with the object’s `collectionSymbol` field."""
  collectionSymbol: String

  """Checks for equality with the object’s `metadataUri` field."""
  metadataUri: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `imageUri` field."""
  imageUri: String
}

"""
A filter to be used against `Erc721Metadatum` object types. All fields are combined with a logical ‘and.’
"""
input Erc721MetadatumFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `collectionName` field."""
  collectionName: StringFilter

  """Filter by the object’s `collectionSymbol` field."""
  collectionSymbol: StringFilter

  """Filter by the object’s `metadataUri` field."""
  metadataUri: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `imageUri` field."""
  imageUri: StringFilter

  """Checks for all expressions in this list."""
  and: [Erc721MetadatumFilter!]

  """Checks for any expressions in this list."""
  or: [Erc721MetadatumFilter!]

  """Negates the expression."""
  not: Erc721MetadatumFilter
}

"""An input for mutations affecting `Erc721Metadatum`"""
input Erc721MetadatumInput {
  tokenId: Float!
  collectionName: String!
  collectionSymbol: String!
  metadataUri: String!
  name: String!
  description: String!
  imageUri: String!
}

"""
Represents an update to a `Erc721Metadatum`. Fields that are set will be updated.
"""
input Erc721MetadatumPatch {
  tokenId: Float
  collectionName: String
  collectionSymbol: String
  metadataUri: String
  name: String
  description: String
  imageUri: String
}

type Erc721Token implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  owner: String!

  """Reads a single `EthAddressUser` that is related to this `Erc721Token`."""
  ethAddressUserByOwner: EthAddressUser

  """
  Reads a single `Erc721Metadatum` that is related to this `Erc721Token`.
  """
  erc721MetadatumByTokenId: Erc721Metadatum

  """Reads and enables pagination through a set of `Erc721Metadatum`."""
  erc721MetadataByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Metadatum`."""
    orderBy: [Erc721MetadataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721MetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721MetadatumFilter
  ): Erc721MetadataConnection! @deprecated(reason: "Please use erc721MetadatumByTokenId instead")

  """Reads and enables pagination through a set of `Erc721Transfer`."""
  erc721TransfersByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TransferCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TransferFilter
  ): Erc721TransfersConnection!

  """Reads and enables pagination through a set of `SuperRareAcceptBid`."""
  superRareAcceptBidsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAcceptBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAcceptBidFilter
  ): SuperRareAcceptBidsConnection!

  """
  Reads a single `SuperRareAuctionDetail` that is related to this `Erc721Token`.
  """
  superRareAuctionDetailByTokenId: SuperRareAuctionDetail

  """
  Reads and enables pagination through a set of `SuperRareAuctionDetail`.
  """
  superRareAuctionDetailsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAuctionDetail`."""
    orderBy: [SuperRareAuctionDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAuctionDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAuctionDetailFilter
  ): SuperRareAuctionDetailsConnection! @deprecated(reason: "Please use superRareAuctionDetailByTokenId instead")

  """Reads and enables pagination through a set of `SuperRareBid`."""
  superRareBidsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareBidFilter
  ): SuperRareBidsConnection!

  """Reads and enables pagination through a set of `SuperRareCancelBid`."""
  superRareCancelBidsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareCancelBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareCancelBidFilter
  ): SuperRareCancelBidsConnection!

  """
  Reads a single `SuperRareEdition` that is related to this `Erc721Token`.
  """
  superRareEditionByTokenId: SuperRareEdition

  """Reads and enables pagination through a set of `SuperRareEdition`."""
  superRareEditionsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareEdition`."""
    orderBy: [SuperRareEditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareEditionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareEditionFilter
  ): SuperRareEditionsConnection! @deprecated(reason: "Please use superRareEditionByTokenId instead")

  """
  Reads a single `SuperRareEstimatedValue` that is related to this `Erc721Token`.
  """
  superRareEstimatedValueByTokenId: SuperRareEstimatedValue

  """
  Reads and enables pagination through a set of `SuperRareEstimatedValue`.
  """
  superRareEstimatedValuesByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareEstimatedValue`."""
    orderBy: [SuperRareEstimatedValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareEstimatedValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareEstimatedValueFilter
  ): SuperRareEstimatedValuesConnection! @deprecated(reason: "Please use superRareEstimatedValueByTokenId instead")

  """
  Reads a single `SuperRareMarketDetail` that is related to this `Erc721Token`.
  """
  superRareMarketDetailByTokenId: SuperRareMarketDetail

  """Reads and enables pagination through a set of `SuperRareMarketDetail`."""
  superRareMarketDetailsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareMarketDetail`."""
    orderBy: [SuperRareMarketDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareMarketDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareMarketDetailFilter
  ): SuperRareMarketDetailsConnection! @deprecated(reason: "Please use superRareMarketDetailByTokenId instead")

  """Reads and enables pagination through a set of `SuperRareSalePriceSet`."""
  superRareSalePriceSetsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSalePriceSet`."""
    orderBy: [SuperRareSalePriceSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSalePriceSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSalePriceSetFilter
  ): SuperRareSalePriceSetsConnection!

  """
  Reads a single `SuperRareSizedImage` that is related to this `Erc721Token`.
  """
  superRareSizedImageByTokenId: SuperRareSizedImage

  """Reads and enables pagination through a set of `SuperRareSizedImage`."""
  superRareSizedImagesByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSizedImage`."""
    orderBy: [SuperRareSizedImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSizedImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSizedImageFilter
  ): SuperRareSizedImagesConnection! @deprecated(reason: "Please use superRareSizedImageByTokenId instead")

  """Reads and enables pagination through a set of `SuperRareSold`."""
  superRareSoldsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSoldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSoldFilter
  ): SuperRareSoldsConnection!

  """Reads and enables pagination through a set of `SuperRareTag`."""
  superRareTagsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareTag`."""
    orderBy: [SuperRareTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareTagFilter
  ): SuperRareTagsConnection!

  """
  Reads a single `SuperRareTokenCreator` that is related to this `Erc721Token`.
  """
  superRareTokenCreatorByTokenId: SuperRareTokenCreator

  """Reads and enables pagination through a set of `SuperRareTokenCreator`."""
  superRareTokenCreatorsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareTokenCreator`."""
    orderBy: [SuperRareTokenCreatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareTokenCreatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareTokenCreatorFilter
  ): SuperRareTokenCreatorsConnection! @deprecated(reason: "Please use superRareTokenCreatorByTokenId instead")

  """Reads and enables pagination through a set of `TokenLike`."""
  tokenLikesByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenLike`."""
    orderBy: [TokenLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenLikeFilter
  ): TokenLikesConnection!

  """Reads and enables pagination through a set of `TokenView`."""
  tokenViewsByTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenView`."""
    orderBy: [TokenViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenViewFilter
  ): TokenViewsConnection!
}

"""
A condition to be used against `Erc721Token` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input Erc721TokenCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `owner` field."""
  owner: String
}

"""
A filter to be used against `Erc721Token` object types. All fields are combined with a logical ‘and.’
"""
input Erc721TokenFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Checks for all expressions in this list."""
  and: [Erc721TokenFilter!]

  """Checks for any expressions in this list."""
  or: [Erc721TokenFilter!]

  """Negates the expression."""
  not: Erc721TokenFilter
}

"""An input for mutations affecting `Erc721Token`"""
input Erc721TokenInput {
  tokenId: Float!
  owner: String!
}

"""
Represents an update to a `Erc721Token`. Fields that are set will be updated.
"""
input Erc721TokenPatch {
  tokenId: Float
  owner: String
}

"""A connection to a list of `Erc721Token` values."""
type Erc721TokensConnection {
  """A list of `Erc721Token` objects."""
  nodes: [Erc721Token]!

  """
  A list of edges which contains the `Erc721Token` and cursor to aid in pagination.
  """
  edges: [Erc721TokensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Erc721Token` you could get from the connection."""
  totalCount: Int!
}

"""A `Erc721Token` edge in the connection."""
type Erc721TokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Erc721Token` at the end of the edge."""
  node: Erc721Token
}

"""Methods to use when ordering `Erc721Token`."""
enum Erc721TokensOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  OWNER_ASC
  OWNER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ETH_ADDRESS_USER_BY_OWNER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_OWNER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_OWNER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_OWNER__ETH_ADDRESS_DESC
  ERC721_METADATUM_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_METADATUM_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_METADATUM_BY_TOKEN_ID__COLLECTION_NAME_ASC
  ERC721_METADATUM_BY_TOKEN_ID__COLLECTION_NAME_DESC
  ERC721_METADATUM_BY_TOKEN_ID__COLLECTION_SYMBOL_ASC
  ERC721_METADATUM_BY_TOKEN_ID__COLLECTION_SYMBOL_DESC
  ERC721_METADATUM_BY_TOKEN_ID__METADATA_URI_ASC
  ERC721_METADATUM_BY_TOKEN_ID__METADATA_URI_DESC
  ERC721_METADATUM_BY_TOKEN_ID__NAME_ASC
  ERC721_METADATUM_BY_TOKEN_ID__NAME_DESC
  ERC721_METADATUM_BY_TOKEN_ID__DESCRIPTION_ASC
  ERC721_METADATUM_BY_TOKEN_ID__DESCRIPTION_DESC
  ERC721_METADATUM_BY_TOKEN_ID__IMAGE_URI_ASC
  ERC721_METADATUM_BY_TOKEN_ID__IMAGE_URI_DESC
  ERC721_TRANSFERS_BY_TOKEN_ID__COUNT_ASC
  ERC721_TRANSFERS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_ACCEPT_BIDS_BY_TOKEN_ID__COUNT_ASC
  SUPER_RARE_ACCEPT_BIDS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_AUCTION_DETAIL_BY_TOKEN_ID__TOKEN_ID_ASC
  SUPER_RARE_AUCTION_DETAIL_BY_TOKEN_ID__TOKEN_ID_DESC
  SUPER_RARE_AUCTION_DETAIL_BY_TOKEN_ID__CURRENT_BIDDER_ASC
  SUPER_RARE_AUCTION_DETAIL_BY_TOKEN_ID__CURRENT_BIDDER_DESC
  SUPER_RARE_AUCTION_DETAIL_BY_TOKEN_ID__CURRENT_BID_ASC
  SUPER_RARE_AUCTION_DETAIL_BY_TOKEN_ID__CURRENT_BID_DESC
  SUPER_RARE_BIDS_BY_TOKEN_ID__COUNT_ASC
  SUPER_RARE_BIDS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_CANCEL_BIDS_BY_TOKEN_ID__COUNT_ASC
  SUPER_RARE_CANCEL_BIDS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_EDITION_BY_TOKEN_ID__TOKEN_ID_ASC
  SUPER_RARE_EDITION_BY_TOKEN_ID__TOKEN_ID_DESC
  SUPER_RARE_EDITION_BY_TOKEN_ID__METADATA_URI_ASC
  SUPER_RARE_EDITION_BY_TOKEN_ID__METADATA_URI_DESC
  SUPER_RARE_EDITION_BY_TOKEN_ID__NUMBER_ASC
  SUPER_RARE_EDITION_BY_TOKEN_ID__NUMBER_DESC
  SUPER_RARE_EDITION_BY_TOKEN_ID__TOTAL_ASC
  SUPER_RARE_EDITION_BY_TOKEN_ID__TOTAL_DESC
  SUPER_RARE_ESTIMATED_VALUE_BY_TOKEN_ID__TOKEN_ID_ASC
  SUPER_RARE_ESTIMATED_VALUE_BY_TOKEN_ID__TOKEN_ID_DESC
  SUPER_RARE_ESTIMATED_VALUE_BY_TOKEN_ID__ESTIMATED_PRICE_ASC
  SUPER_RARE_ESTIMATED_VALUE_BY_TOKEN_ID__ESTIMATED_PRICE_DESC
  SUPER_RARE_MARKET_DETAIL_BY_TOKEN_ID__TOKEN_ID_ASC
  SUPER_RARE_MARKET_DETAIL_BY_TOKEN_ID__TOKEN_ID_DESC
  SUPER_RARE_MARKET_DETAIL_BY_TOKEN_ID__CURRENT_PRICE_ASC
  SUPER_RARE_MARKET_DETAIL_BY_TOKEN_ID__CURRENT_PRICE_DESC
  SUPER_RARE_SALE_PRICE_SETS_BY_TOKEN_ID__COUNT_ASC
  SUPER_RARE_SALE_PRICE_SETS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_SIZED_IMAGE_BY_TOKEN_ID__TOKEN_ID_ASC
  SUPER_RARE_SIZED_IMAGE_BY_TOKEN_ID__TOKEN_ID_DESC
  SUPER_RARE_SIZED_IMAGE_BY_TOKEN_ID__THUMBNAIL_ASC
  SUPER_RARE_SIZED_IMAGE_BY_TOKEN_ID__THUMBNAIL_DESC
  SUPER_RARE_SIZED_IMAGE_BY_TOKEN_ID__STANDARD_ASC
  SUPER_RARE_SIZED_IMAGE_BY_TOKEN_ID__STANDARD_DESC
  SUPER_RARE_SOLDS_BY_TOKEN_ID__COUNT_ASC
  SUPER_RARE_SOLDS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_TAGS_BY_TOKEN_ID__COUNT_ASC
  SUPER_RARE_TAGS_BY_TOKEN_ID__COUNT_DESC
  SUPER_RARE_TOKEN_CREATOR_BY_TOKEN_ID__TOKEN_ID_ASC
  SUPER_RARE_TOKEN_CREATOR_BY_TOKEN_ID__TOKEN_ID_DESC
  SUPER_RARE_TOKEN_CREATOR_BY_TOKEN_ID__ADDRESS_ASC
  SUPER_RARE_TOKEN_CREATOR_BY_TOKEN_ID__ADDRESS_DESC
  TOKEN_LIKES_BY_TOKEN_ID__COUNT_ASC
  TOKEN_LIKES_BY_TOKEN_ID__COUNT_DESC
  TOKEN_VIEWS_BY_TOKEN_ID__COUNT_ASC
  TOKEN_VIEWS_BY_TOKEN_ID__COUNT_DESC
}

type Erc721Transfer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  from: String!
  to: String!
  tokenId: Float
  contractAddress: String!
  id: String!

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByFrom: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByTo: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `Erc721Transfer`."""
  erc721TokenByTokenId: Erc721Token

  """Reads a single `EventDetail` that is related to this `Erc721Transfer`."""
  eventDetailById: EventDetail
}

"""
A condition to be used against `Erc721Transfer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input Erc721TransferCondition {
  """Checks for equality with the object’s `from` field."""
  from: String

  """Checks for equality with the object’s `to` field."""
  to: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `Erc721Transfer` object types. All fields are combined with a logical ‘and.’
"""
input Erc721TransferFilter {
  """Filter by the object’s `from` field."""
  from: StringFilter

  """Filter by the object’s `to` field."""
  to: StringFilter

  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [Erc721TransferFilter!]

  """Checks for any expressions in this list."""
  or: [Erc721TransferFilter!]

  """Negates the expression."""
  not: Erc721TransferFilter
}

"""An input for mutations affecting `Erc721Transfer`"""
input Erc721TransferInput {
  from: String!
  to: String!
  tokenId: Float
  contractAddress: String!
  id: String!
}

"""
Represents an update to a `Erc721Transfer`. Fields that are set will be updated.
"""
input Erc721TransferPatch {
  from: String
  to: String
  tokenId: Float
  contractAddress: String
  id: String
}

"""A connection to a list of `Erc721Transfer` values."""
type Erc721TransfersConnection {
  """A list of `Erc721Transfer` objects."""
  nodes: [Erc721Transfer]!

  """
  A list of edges which contains the `Erc721Transfer` and cursor to aid in pagination.
  """
  edges: [Erc721TransfersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Erc721Transfer` you could get from the connection."""
  totalCount: Int!
}

"""A `Erc721Transfer` edge in the connection."""
type Erc721TransfersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Erc721Transfer` at the end of the edge."""
  node: Erc721Transfer
}

"""Methods to use when ordering `Erc721Transfer`."""
enum Erc721TransfersOrderBy {
  NATURAL
  FROM_ASC
  FROM_DESC
  TO_ASC
  TO_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ETH_ADDRESS_USER_BY_FROM__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_FROM__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_FROM__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_FROM__ETH_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_TO__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_TO__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_TO__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_TO__ETH_ADDRESS_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_ASC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_ASC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_DESC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_ASC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_DESC
  EVENT_DETAIL_BY_ID__LOG_INDEX_ASC
  EVENT_DETAIL_BY_ID__LOG_INDEX_DESC
  EVENT_DETAIL_BY_ID__ID_ASC
  EVENT_DETAIL_BY_ID__ID_DESC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_ASC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_DESC
}

type EthAddressUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userAddress: String
  ethAddress: String!

  """Reads a single `User` that is related to this `EthAddressUser`."""
  userByUserAddress: User

  """Reads and enables pagination through a set of `Erc721Token`."""
  erc721TokensByOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Token`."""
    orderBy: [Erc721TokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TokenFilter
  ): Erc721TokensConnection!

  """Reads and enables pagination through a set of `Erc721Transfer`."""
  erc721TransfersByFrom(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TransferCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TransferFilter
  ): Erc721TransfersConnection!

  """Reads and enables pagination through a set of `Erc721Transfer`."""
  erc721TransfersByTo(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TransferCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TransferFilter
  ): Erc721TransfersConnection!

  """Reads and enables pagination through a set of `SuperRareAcceptBid`."""
  superRareAcceptBidsBySeller(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAcceptBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAcceptBidFilter
  ): SuperRareAcceptBidsConnection!

  """Reads and enables pagination through a set of `SuperRareAcceptBid`."""
  superRareAcceptBidsByBidder(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAcceptBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAcceptBidFilter
  ): SuperRareAcceptBidsConnection!

  """Reads and enables pagination through a set of `SuperRareBid`."""
  superRareBidsByBidder(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareBidFilter
  ): SuperRareBidsConnection!

  """Reads and enables pagination through a set of `SuperRareCancelBid`."""
  superRareCancelBidsByBidder(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareCancelBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareCancelBidFilter
  ): SuperRareCancelBidsConnection!

  """Reads and enables pagination through a set of `SuperRareSold`."""
  superRareSoldsBySeller(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSoldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSoldFilter
  ): SuperRareSoldsConnection!

  """Reads and enables pagination through a set of `SuperRareSold`."""
  superRareSoldsByBuyer(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSoldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSoldFilter
  ): SuperRareSoldsConnection!

  """Reads and enables pagination through a set of `SuperRareTokenCreator`."""
  superRareTokenCreatorsByAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareTokenCreator`."""
    orderBy: [SuperRareTokenCreatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareTokenCreatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareTokenCreatorFilter
  ): SuperRareTokenCreatorsConnection!

  """Reads and enables pagination through a set of `TokenLike`."""
  tokenLikesByAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenLike`."""
    orderBy: [TokenLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenLikeFilter
  ): TokenLikesConnection!

  """Reads and enables pagination through a set of `TokenView`."""
  tokenViewsByAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenView`."""
    orderBy: [TokenViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenViewFilter
  ): TokenViewsConnection!

  """Reads and enables pagination through a set of `TopArtist`."""
  topArtistsByEthAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TopArtist`."""
    orderBy: [TopArtistsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopArtistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopArtistFilter
  ): TopArtistsConnection!

  """Reads and enables pagination through a set of `TopCollector`."""
  topCollectorsByEthAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TopCollector`."""
    orderBy: [TopCollectorsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopCollectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopCollectorFilter
  ): TopCollectorsConnection!
}

"""
A condition to be used against `EthAddressUser` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EthAddressUserCondition {
  """Checks for equality with the object’s `userAddress` field."""
  userAddress: String

  """Checks for equality with the object’s `ethAddress` field."""
  ethAddress: String
}

"""
A filter to be used against `EthAddressUser` object types. All fields are combined with a logical ‘and.’
"""
input EthAddressUserFilter {
  """Filter by the object’s `userAddress` field."""
  userAddress: StringFilter

  """Filter by the object’s `ethAddress` field."""
  ethAddress: StringFilter

  """Checks for all expressions in this list."""
  and: [EthAddressUserFilter!]

  """Checks for any expressions in this list."""
  or: [EthAddressUserFilter!]

  """Negates the expression."""
  not: EthAddressUserFilter
}

"""An input for mutations affecting `EthAddressUser`"""
input EthAddressUserInput {
  userAddress: String
  ethAddress: String!
}

"""
Represents an update to a `EthAddressUser`. Fields that are set will be updated.
"""
input EthAddressUserPatch {
  userAddress: String
  ethAddress: String
}

"""A connection to a list of `EthAddressUser` values."""
type EthAddressUsersConnection {
  """A list of `EthAddressUser` objects."""
  nodes: [EthAddressUser]!

  """
  A list of edges which contains the `EthAddressUser` and cursor to aid in pagination.
  """
  edges: [EthAddressUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EthAddressUser` you could get from the connection."""
  totalCount: Int!
}

"""A `EthAddressUser` edge in the connection."""
type EthAddressUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EthAddressUser` at the end of the edge."""
  node: EthAddressUser
}

"""Methods to use when ordering `EthAddressUser`."""
enum EthAddressUsersOrderBy {
  NATURAL
  USER_ADDRESS_ASC
  USER_ADDRESS_DESC
  ETH_ADDRESS_ASC
  ETH_ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ADDRESS__EMAIL_ASC
  USER_BY_USER_ADDRESS__EMAIL_DESC
  USER_BY_USER_ADDRESS__USERNAME_ASC
  USER_BY_USER_ADDRESS__USERNAME_DESC
  USER_BY_USER_ADDRESS__ETHADDRESS_ASC
  USER_BY_USER_ADDRESS__ETHADDRESS_DESC
  USER_BY_USER_ADDRESS__FULLNAME_ASC
  USER_BY_USER_ADDRESS__FULLNAME_DESC
  USER_BY_USER_ADDRESS__LOCATION_ASC
  USER_BY_USER_ADDRESS__LOCATION_DESC
  USER_BY_USER_ADDRESS__BIO_ASC
  USER_BY_USER_ADDRESS__BIO_DESC
  USER_BY_USER_ADDRESS__ISVERIFIED_ASC
  USER_BY_USER_ADDRESS__ISVERIFIED_DESC
  USER_BY_USER_ADDRESS__AVATAR_ASC
  USER_BY_USER_ADDRESS__AVATAR_DESC
  USER_BY_USER_ADDRESS__WEBSITE_ASC
  USER_BY_USER_ADDRESS__WEBSITE_DESC
  USER_BY_USER_ADDRESS__INSTAGRAMLINK_ASC
  USER_BY_USER_ADDRESS__INSTAGRAMLINK_DESC
  USER_BY_USER_ADDRESS__TWITTERLINK_ASC
  USER_BY_USER_ADDRESS__TWITTERLINK_DESC
  USER_BY_USER_ADDRESS__STEEMITLINK_ASC
  USER_BY_USER_ADDRESS__STEEMITLINK_DESC
  USER_BY_USER_ADDRESS__SPOTIFYLINK_ASC
  USER_BY_USER_ADDRESS__SPOTIFYLINK_DESC
  USER_BY_USER_ADDRESS__SOUNDCLOUDLINK_ASC
  USER_BY_USER_ADDRESS__SOUNDCLOUDLINK_DESC
  USER_BY_USER_ADDRESS__CREATEDAT_ASC
  USER_BY_USER_ADDRESS__CREATEDAT_DESC
  USER_BY_USER_ADDRESS__ETHEREUM_ADDRESS_ASC
  USER_BY_USER_ADDRESS__ETHEREUM_ADDRESS_DESC
  USER_BY_USER_ADDRESS__ID_ASC
  USER_BY_USER_ADDRESS__ID_DESC
  USER_BY_USER_ADDRESS__CREATED_AT_ASC
  USER_BY_USER_ADDRESS__CREATED_AT_DESC
  USER_BY_USER_ADDRESS__INSTAGRAM_URL_ASC
  USER_BY_USER_ADDRESS__INSTAGRAM_URL_DESC
  USER_BY_USER_ADDRESS__CRYPTOVOXELS_URL_ASC
  USER_BY_USER_ADDRESS__CRYPTOVOXELS_URL_DESC
  USER_BY_USER_ADDRESS__NOISE_FILTER_ASC
  USER_BY_USER_ADDRESS__NOISE_FILTER_DESC
  USER_BY_USER_ADDRESS__BROWSER_NOTIFICATIONS_ASC
  USER_BY_USER_ADDRESS__BROWSER_NOTIFICATIONS_DESC
  ERC721_TOKENS_BY_OWNER__COUNT_ASC
  ERC721_TOKENS_BY_OWNER__COUNT_DESC
  ERC721_TRANSFERS_BY_FROM__COUNT_ASC
  ERC721_TRANSFERS_BY_FROM__COUNT_DESC
  ERC721_TRANSFERS_BY_TO__COUNT_ASC
  ERC721_TRANSFERS_BY_TO__COUNT_DESC
  SUPER_RARE_ACCEPT_BIDS_BY_SELLER__COUNT_ASC
  SUPER_RARE_ACCEPT_BIDS_BY_SELLER__COUNT_DESC
  SUPER_RARE_ACCEPT_BIDS_BY_BIDDER__COUNT_ASC
  SUPER_RARE_ACCEPT_BIDS_BY_BIDDER__COUNT_DESC
  SUPER_RARE_BIDS_BY_BIDDER__COUNT_ASC
  SUPER_RARE_BIDS_BY_BIDDER__COUNT_DESC
  SUPER_RARE_CANCEL_BIDS_BY_BIDDER__COUNT_ASC
  SUPER_RARE_CANCEL_BIDS_BY_BIDDER__COUNT_DESC
  SUPER_RARE_SOLDS_BY_SELLER__COUNT_ASC
  SUPER_RARE_SOLDS_BY_SELLER__COUNT_DESC
  SUPER_RARE_SOLDS_BY_BUYER__COUNT_ASC
  SUPER_RARE_SOLDS_BY_BUYER__COUNT_DESC
  SUPER_RARE_TOKEN_CREATORS_BY_ADDRESS__COUNT_ASC
  SUPER_RARE_TOKEN_CREATORS_BY_ADDRESS__COUNT_DESC
  TOKEN_LIKES_BY_ADDRESS__COUNT_ASC
  TOKEN_LIKES_BY_ADDRESS__COUNT_DESC
  TOKEN_VIEWS_BY_ADDRESS__COUNT_ASC
  TOKEN_VIEWS_BY_ADDRESS__COUNT_DESC
  TOP_ARTISTS_BY_ETH_ADDRESS__COUNT_ASC
  TOP_ARTISTS_BY_ETH_ADDRESS__COUNT_DESC
  TOP_COLLECTORS_BY_ETH_ADDRESS__COUNT_ASC
  TOP_COLLECTORS_BY_ETH_ADDRESS__COUNT_DESC
}

type EventDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  blockNumber: Float!
  blockTimestamp: Datetime!
  blockHash: String!
  transactionHash: String!
  transactionIndex: Float!
  logIndex: Float!
  id: String!
  contractAddress: String!

  """Reads a single `Erc721Transfer` that is related to this `EventDetail`."""
  erc721TransferById: Erc721Transfer

  """Reads and enables pagination through a set of `Erc721Transfer`."""
  erc721TransfersById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TransferCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TransferFilter
  ): Erc721TransfersConnection! @deprecated(reason: "Please use erc721TransferById instead")

  """
  Reads a single `SuperRareAcceptBid` that is related to this `EventDetail`.
  """
  superRareAcceptBidById: SuperRareAcceptBid

  """Reads and enables pagination through a set of `SuperRareAcceptBid`."""
  superRareAcceptBidsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAcceptBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAcceptBidFilter
  ): SuperRareAcceptBidsConnection! @deprecated(reason: "Please use superRareAcceptBidById instead")

  """Reads a single `SuperRareBid` that is related to this `EventDetail`."""
  superRareBidById: SuperRareBid

  """Reads and enables pagination through a set of `SuperRareBid`."""
  superRareBidsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareBidFilter
  ): SuperRareBidsConnection! @deprecated(reason: "Please use superRareBidById instead")

  """
  Reads a single `SuperRareCancelBid` that is related to this `EventDetail`.
  """
  superRareCancelBidById: SuperRareCancelBid

  """Reads and enables pagination through a set of `SuperRareCancelBid`."""
  superRareCancelBidsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareCancelBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareCancelBidFilter
  ): SuperRareCancelBidsConnection! @deprecated(reason: "Please use superRareCancelBidById instead")

  """
  Reads a single `SuperRareSalePriceSet` that is related to this `EventDetail`.
  """
  superRareSalePriceSetById: SuperRareSalePriceSet

  """Reads and enables pagination through a set of `SuperRareSalePriceSet`."""
  superRareSalePriceSetsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSalePriceSet`."""
    orderBy: [SuperRareSalePriceSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSalePriceSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSalePriceSetFilter
  ): SuperRareSalePriceSetsConnection! @deprecated(reason: "Please use superRareSalePriceSetById instead")

  """Reads a single `SuperRareSold` that is related to this `EventDetail`."""
  superRareSoldById: SuperRareSold

  """Reads and enables pagination through a set of `SuperRareSold`."""
  superRareSoldsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSoldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSoldFilter
  ): SuperRareSoldsConnection! @deprecated(reason: "Please use superRareSoldById instead")
}

"""
A condition to be used against `EventDetail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventDetailCondition {
  """Checks for equality with the object’s `blockNumber` field."""
  blockNumber: Float

  """Checks for equality with the object’s `blockTimestamp` field."""
  blockTimestamp: Datetime

  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `transactionIndex` field."""
  transactionIndex: Float

  """Checks for equality with the object’s `logIndex` field."""
  logIndex: Float

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String
}

"""
A filter to be used against `EventDetail` object types. All fields are combined with a logical ‘and.’
"""
input EventDetailFilter {
  """Filter by the object’s `blockNumber` field."""
  blockNumber: FloatFilter

  """Filter by the object’s `blockTimestamp` field."""
  blockTimestamp: DatetimeFilter

  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `transactionHash` field."""
  transactionHash: StringFilter

  """Filter by the object’s `transactionIndex` field."""
  transactionIndex: FloatFilter

  """Filter by the object’s `logIndex` field."""
  logIndex: FloatFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Checks for all expressions in this list."""
  and: [EventDetailFilter!]

  """Checks for any expressions in this list."""
  or: [EventDetailFilter!]

  """Negates the expression."""
  not: EventDetailFilter
}

"""An input for mutations affecting `EventDetail`"""
input EventDetailInput {
  blockNumber: Float!
  blockTimestamp: Datetime!
  blockHash: String!
  transactionHash: String!
  transactionIndex: Float!
  logIndex: Float!
  id: String!
  contractAddress: String!
}

"""
Represents an update to a `EventDetail`. Fields that are set will be updated.
"""
input EventDetailPatch {
  blockNumber: Float
  blockTimestamp: Datetime
  blockHash: String
  transactionHash: String
  transactionIndex: Float
  logIndex: Float
  id: String
  contractAddress: String
}

"""A connection to a list of `EventDetail` values."""
type EventDetailsConnection {
  """A list of `EventDetail` objects."""
  nodes: [EventDetail]!

  """
  A list of edges which contains the `EventDetail` and cursor to aid in pagination.
  """
  edges: [EventDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventDetail` you could get from the connection."""
  totalCount: Int!
}

"""A `EventDetail` edge in the connection."""
type EventDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventDetail` at the end of the edge."""
  node: EventDetail
}

"""Methods to use when ordering `EventDetail`."""
enum EventDetailsOrderBy {
  NATURAL
  BLOCK_NUMBER_ASC
  BLOCK_NUMBER_DESC
  BLOCK_TIMESTAMP_ASC
  BLOCK_TIMESTAMP_DESC
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  TRANSACTION_INDEX_ASC
  TRANSACTION_INDEX_DESC
  LOG_INDEX_ASC
  LOG_INDEX_DESC
  ID_ASC
  ID_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TRANSFER_BY_ID__FROM_ASC
  ERC721_TRANSFER_BY_ID__FROM_DESC
  ERC721_TRANSFER_BY_ID__TO_ASC
  ERC721_TRANSFER_BY_ID__TO_DESC
  ERC721_TRANSFER_BY_ID__TOKEN_ID_ASC
  ERC721_TRANSFER_BY_ID__TOKEN_ID_DESC
  ERC721_TRANSFER_BY_ID__CONTRACT_ADDRESS_ASC
  ERC721_TRANSFER_BY_ID__CONTRACT_ADDRESS_DESC
  ERC721_TRANSFER_BY_ID__ID_ASC
  ERC721_TRANSFER_BY_ID__ID_DESC
  SUPER_RARE_ACCEPT_BID_BY_ID__TOKEN_ID_ASC
  SUPER_RARE_ACCEPT_BID_BY_ID__TOKEN_ID_DESC
  SUPER_RARE_ACCEPT_BID_BY_ID__SELLER_ASC
  SUPER_RARE_ACCEPT_BID_BY_ID__SELLER_DESC
  SUPER_RARE_ACCEPT_BID_BY_ID__BIDDER_ASC
  SUPER_RARE_ACCEPT_BID_BY_ID__BIDDER_DESC
  SUPER_RARE_ACCEPT_BID_BY_ID__AMOUNT_ASC
  SUPER_RARE_ACCEPT_BID_BY_ID__AMOUNT_DESC
  SUPER_RARE_ACCEPT_BID_BY_ID__CONTRACT_ADDRESS_ASC
  SUPER_RARE_ACCEPT_BID_BY_ID__CONTRACT_ADDRESS_DESC
  SUPER_RARE_ACCEPT_BID_BY_ID__ID_ASC
  SUPER_RARE_ACCEPT_BID_BY_ID__ID_DESC
  SUPER_RARE_BID_BY_ID__TOKEN_ID_ASC
  SUPER_RARE_BID_BY_ID__TOKEN_ID_DESC
  SUPER_RARE_BID_BY_ID__BIDDER_ASC
  SUPER_RARE_BID_BY_ID__BIDDER_DESC
  SUPER_RARE_BID_BY_ID__AMOUNT_ASC
  SUPER_RARE_BID_BY_ID__AMOUNT_DESC
  SUPER_RARE_BID_BY_ID__CONTRACT_ADDRESS_ASC
  SUPER_RARE_BID_BY_ID__CONTRACT_ADDRESS_DESC
  SUPER_RARE_BID_BY_ID__ID_ASC
  SUPER_RARE_BID_BY_ID__ID_DESC
  SUPER_RARE_CANCEL_BID_BY_ID__TOKEN_ID_ASC
  SUPER_RARE_CANCEL_BID_BY_ID__TOKEN_ID_DESC
  SUPER_RARE_CANCEL_BID_BY_ID__BIDDER_ASC
  SUPER_RARE_CANCEL_BID_BY_ID__BIDDER_DESC
  SUPER_RARE_CANCEL_BID_BY_ID__AMOUNT_ASC
  SUPER_RARE_CANCEL_BID_BY_ID__AMOUNT_DESC
  SUPER_RARE_CANCEL_BID_BY_ID__CONTRACT_ADDRESS_ASC
  SUPER_RARE_CANCEL_BID_BY_ID__CONTRACT_ADDRESS_DESC
  SUPER_RARE_CANCEL_BID_BY_ID__ID_ASC
  SUPER_RARE_CANCEL_BID_BY_ID__ID_DESC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__TOKEN_ID_ASC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__TOKEN_ID_DESC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__AMOUNT_ASC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__AMOUNT_DESC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__CONTRACT_ADDRESS_ASC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__CONTRACT_ADDRESS_DESC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__ID_ASC
  SUPER_RARE_SALE_PRICE_SET_BY_ID__ID_DESC
  SUPER_RARE_SOLD_BY_ID__TOKEN_ID_ASC
  SUPER_RARE_SOLD_BY_ID__TOKEN_ID_DESC
  SUPER_RARE_SOLD_BY_ID__SELLER_ASC
  SUPER_RARE_SOLD_BY_ID__SELLER_DESC
  SUPER_RARE_SOLD_BY_ID__BUYER_ASC
  SUPER_RARE_SOLD_BY_ID__BUYER_DESC
  SUPER_RARE_SOLD_BY_ID__AMOUNT_ASC
  SUPER_RARE_SOLD_BY_ID__AMOUNT_DESC
  SUPER_RARE_SOLD_BY_ID__CONTRACT_ADDRESS_ASC
  SUPER_RARE_SOLD_BY_ID__CONTRACT_ADDRESS_DESC
  SUPER_RARE_SOLD_BY_ID__ID_ASC
  SUPER_RARE_SOLD_BY_ID__ID_DESC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""A connection to a list of `FlywaySchemaHistory` values."""
type FlywaySchemaHistoriesConnection {
  """A list of `FlywaySchemaHistory` objects."""
  nodes: [FlywaySchemaHistory]!

  """
  A list of edges which contains the `FlywaySchemaHistory` and cursor to aid in pagination.
  """
  edges: [FlywaySchemaHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FlywaySchemaHistory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FlywaySchemaHistory` edge in the connection."""
type FlywaySchemaHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FlywaySchemaHistory` at the end of the edge."""
  node: FlywaySchemaHistory
}

"""Methods to use when ordering `FlywaySchemaHistory`."""
enum FlywaySchemaHistoriesOrderBy {
  NATURAL
  INSTALLED_RANK_ASC
  INSTALLED_RANK_DESC
  VERSION_ASC
  VERSION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ASC
  TYPE_DESC
  SCRIPT_ASC
  SCRIPT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  INSTALLED_BY_ASC
  INSTALLED_BY_DESC
  INSTALLED_ON_ASC
  INSTALLED_ON_DESC
  EXECUTION_TIME_ASC
  EXECUTION_TIME_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FlywaySchemaHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime!
  executionTime: Int!
  success: Boolean!
}

"""
A condition to be used against `FlywaySchemaHistory` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FlywaySchemaHistoryCondition {
  """Checks for equality with the object’s `installedRank` field."""
  installedRank: Int

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `script` field."""
  script: String

  """Checks for equality with the object’s `checksum` field."""
  checksum: Int

  """Checks for equality with the object’s `installedBy` field."""
  installedBy: String

  """Checks for equality with the object’s `installedOn` field."""
  installedOn: Datetime

  """Checks for equality with the object’s `executionTime` field."""
  executionTime: Int

  """Checks for equality with the object’s `success` field."""
  success: Boolean
}

"""
A filter to be used against `FlywaySchemaHistory` object types. All fields are combined with a logical ‘and.’
"""
input FlywaySchemaHistoryFilter {
  """Filter by the object’s `installedRank` field."""
  installedRank: IntFilter

  """Filter by the object’s `version` field."""
  version: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `script` field."""
  script: StringFilter

  """Filter by the object’s `checksum` field."""
  checksum: IntFilter

  """Filter by the object’s `installedBy` field."""
  installedBy: StringFilter

  """Filter by the object’s `installedOn` field."""
  installedOn: DatetimeFilter

  """Filter by the object’s `executionTime` field."""
  executionTime: IntFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Checks for all expressions in this list."""
  and: [FlywaySchemaHistoryFilter!]

  """Checks for any expressions in this list."""
  or: [FlywaySchemaHistoryFilter!]

  """Negates the expression."""
  not: FlywaySchemaHistoryFilter
}

"""An input for mutations affecting `FlywaySchemaHistory`"""
input FlywaySchemaHistoryInput {
  installedRank: Int!
  version: String
  description: String!
  type: String!
  script: String!
  checksum: Int
  installedBy: String!
  installedOn: Datetime
  executionTime: Int!
  success: Boolean!
}

"""
Represents an update to a `FlywaySchemaHistory`. Fields that are set will be updated.
"""
input FlywaySchemaHistoryPatch {
  installedRank: Int
  version: String
  description: String
  type: String
  script: String
  checksum: Int
  installedBy: String
  installedOn: Datetime
  executionTime: Int
  success: Boolean
}

type GeneralSuperrareStat {
  totalArtworksSold: Int
  averageResaleValue: Float
  totalEthEarnedByArtists: Float
  totalEthEarnedByCollectors: Float
}

"""Processed events that the herald handed off a notifier."""
type HeraldEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique id of the herald event."""
  id: BigInt!

  """
  The event id. For blockchain transactions it is the block hash appended with the log index.
  """
  eventId: String!

  """The notifier that processed the event"""
  notifierType: HeraldNotifierType!
  processedAt: Datetime
}

"""
A condition to be used against `HeraldEvent` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HeraldEventCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `eventId` field."""
  eventId: String

  """Checks for equality with the object’s `notifierType` field."""
  notifierType: HeraldNotifierType

  """Checks for equality with the object’s `processedAt` field."""
  processedAt: Datetime
}

"""
A filter to be used against `HeraldEvent` object types. All fields are combined with a logical ‘and.’
"""
input HeraldEventFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `eventId` field."""
  eventId: StringFilter

  """Filter by the object’s `notifierType` field."""
  notifierType: HeraldNotifierTypeFilter

  """Filter by the object’s `processedAt` field."""
  processedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [HeraldEventFilter!]

  """Checks for any expressions in this list."""
  or: [HeraldEventFilter!]

  """Negates the expression."""
  not: HeraldEventFilter
}

"""An input for mutations affecting `HeraldEvent`"""
input HeraldEventInput {
  """Unique id of the herald event."""
  id: BigInt

  """
  The event id. For blockchain transactions it is the block hash appended with the log index.
  """
  eventId: String!

  """The notifier that processed the event"""
  notifierType: HeraldNotifierType!
  processedAt: Datetime
}

"""
Represents an update to a `HeraldEvent`. Fields that are set will be updated.
"""
input HeraldEventPatch {
  """Unique id of the herald event."""
  id: BigInt

  """
  The event id. For blockchain transactions it is the block hash appended with the log index.
  """
  eventId: String

  """The notifier that processed the event"""
  notifierType: HeraldNotifierType
  processedAt: Datetime
}

"""A connection to a list of `HeraldEvent` values."""
type HeraldEventsConnection {
  """A list of `HeraldEvent` objects."""
  nodes: [HeraldEvent]!

  """
  A list of edges which contains the `HeraldEvent` and cursor to aid in pagination.
  """
  edges: [HeraldEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HeraldEvent` you could get from the connection."""
  totalCount: Int!
}

"""A `HeraldEvent` edge in the connection."""
type HeraldEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HeraldEvent` at the end of the edge."""
  node: HeraldEvent
}

"""Methods to use when ordering `HeraldEvent`."""
enum HeraldEventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  NOTIFIER_TYPE_ASC
  NOTIFIER_TYPE_DESC
  PROCESSED_AT_ASC
  PROCESSED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum HeraldNotifierType {
  EMAIL
  SEGMENT
}

"""
A filter to be used against HeraldNotifierType fields. All fields are combined with a logical ‘and.’
"""
input HeraldNotifierTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: HeraldNotifierType

  """Not equal to the specified value."""
  notEqualTo: HeraldNotifierType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: HeraldNotifierType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: HeraldNotifierType

  """Included in the specified list."""
  in: [HeraldNotifierType!]

  """Not included in the specified list."""
  notIn: [HeraldNotifierType!]

  """Less than the specified value."""
  lessThan: HeraldNotifierType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: HeraldNotifierType

  """Greater than the specified value."""
  greaterThan: HeraldNotifierType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: HeraldNotifierType
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}

"""All input for the `markUserAppNotificationsRead` mutation."""
input MarkUserAppNotificationsReadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ids: [BigInt]!
  userId: BigInt!
}

"""The output of our `markUserAppNotificationsRead` mutation."""
type MarkUserAppNotificationsReadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userAppNotification: UserAppNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAppNotification`."""
  userByUserId: User

  """An edge for our `UserAppNotification`. May be used by Relay 1."""
  userAppNotificationEdge(
    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAppNotificationsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `FlywaySchemaHistory`."""
  createFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFlywaySchemaHistoryInput!
  ): CreateFlywaySchemaHistoryPayload

  """Creates a single `Erc721Metadatum`."""
  createErc721Metadatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateErc721MetadatumInput!
  ): CreateErc721MetadatumPayload

  """Creates a single `Erc721Token`."""
  createErc721Token(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateErc721TokenInput!
  ): CreateErc721TokenPayload

  """Creates a single `Erc721Transfer`."""
  createErc721Transfer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateErc721TransferInput!
  ): CreateErc721TransferPayload

  """Creates a single `EthAddressUser`."""
  createEthAddressUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEthAddressUserInput!
  ): CreateEthAddressUserPayload

  """Creates a single `EventDetail`."""
  createEventDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventDetailInput!
  ): CreateEventDetailPayload

  """Creates a single `SuperRareAcceptBid`."""
  createSuperRareAcceptBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareAcceptBidInput!
  ): CreateSuperRareAcceptBidPayload

  """Creates a single `SuperRareAuctionDetail`."""
  createSuperRareAuctionDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareAuctionDetailInput!
  ): CreateSuperRareAuctionDetailPayload

  """Creates a single `SuperRareBid`."""
  createSuperRareBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareBidInput!
  ): CreateSuperRareBidPayload

  """Creates a single `SuperRareCancelBid`."""
  createSuperRareCancelBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareCancelBidInput!
  ): CreateSuperRareCancelBidPayload

  """Creates a single `SuperRareEdition`."""
  createSuperRareEdition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareEditionInput!
  ): CreateSuperRareEditionPayload

  """Creates a single `SuperRareEstimatedValue`."""
  createSuperRareEstimatedValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareEstimatedValueInput!
  ): CreateSuperRareEstimatedValuePayload

  """Creates a single `SuperRareMarketDetail`."""
  createSuperRareMarketDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareMarketDetailInput!
  ): CreateSuperRareMarketDetailPayload

  """Creates a single `SuperRareSalePriceSet`."""
  createSuperRareSalePriceSet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareSalePriceSetInput!
  ): CreateSuperRareSalePriceSetPayload

  """Creates a single `SuperRareSizedImage`."""
  createSuperRareSizedImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareSizedImageInput!
  ): CreateSuperRareSizedImagePayload

  """Creates a single `SuperRareSold`."""
  createSuperRareSold(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareSoldInput!
  ): CreateSuperRareSoldPayload

  """Creates a single `SuperRareTag`."""
  createSuperRareTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareTagInput!
  ): CreateSuperRareTagPayload

  """Creates a single `SuperRareTokenCreator`."""
  createSuperRareTokenCreator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSuperRareTokenCreatorInput!
  ): CreateSuperRareTokenCreatorPayload

  """Creates a single `TokenLike`."""
  createTokenLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTokenLikeInput!
  ): CreateTokenLikePayload

  """Creates a single `TokenView`."""
  createTokenView(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTokenViewInput!
  ): CreateTokenViewPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserTracking`."""
  createUserTracking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserTrackingInput!
  ): CreateUserTrackingPayload

  """Creates a single `HeraldEvent`."""
  createHeraldEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHeraldEventInput!
  ): CreateHeraldEventPayload

  """Creates a single `NftLike`."""
  createNftLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNftLikeInput!
  ): CreateNftLikePayload

  """Creates a single `NftView`."""
  createNftView(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNftViewInput!
  ): CreateNftViewPayload

  """Creates a single `SegmentNotification`."""
  createSegmentNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSegmentNotificationInput!
  ): CreateSegmentNotificationPayload

  """Creates a single `SentEmailNotification`."""
  createSentEmailNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSentEmailNotificationInput!
  ): CreateSentEmailNotificationPayload

  """Creates a single `UserAppNotification`."""
  createUserAppNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAppNotificationInput!
  ): CreateUserAppNotificationPayload

  """Creates a single `UserNotificationSetting`."""
  createUserNotificationSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserNotificationSettingInput!
  ): CreateUserNotificationSettingPayload

  """
  Updates a single `FlywaySchemaHistory` using its globally unique id and a patch.
  """
  updateFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryInput!
  ): UpdateFlywaySchemaHistoryPayload

  """Updates a single `FlywaySchemaHistory` using a unique key and a patch."""
  updateFlywaySchemaHistoryByInstalledRank(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryByInstalledRankInput!
  ): UpdateFlywaySchemaHistoryPayload

  """
  Updates a single `Erc721Metadatum` using its globally unique id and a patch.
  """
  updateErc721Metadatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateErc721MetadatumInput!
  ): UpdateErc721MetadatumPayload

  """Updates a single `Erc721Metadatum` using a unique key and a patch."""
  updateErc721MetadatumByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateErc721MetadatumByTokenIdInput!
  ): UpdateErc721MetadatumPayload

  """
  Updates a single `Erc721Token` using its globally unique id and a patch.
  """
  updateErc721Token(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateErc721TokenInput!
  ): UpdateErc721TokenPayload

  """Updates a single `Erc721Token` using a unique key and a patch."""
  updateErc721TokenByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateErc721TokenByTokenIdInput!
  ): UpdateErc721TokenPayload

  """
  Updates a single `Erc721Transfer` using its globally unique id and a patch.
  """
  updateErc721Transfer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateErc721TransferInput!
  ): UpdateErc721TransferPayload

  """Updates a single `Erc721Transfer` using a unique key and a patch."""
  updateErc721TransferById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateErc721TransferByIdInput!
  ): UpdateErc721TransferPayload

  """
  Updates a single `EthAddressUser` using its globally unique id and a patch.
  """
  updateEthAddressUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEthAddressUserInput!
  ): UpdateEthAddressUserPayload

  """Updates a single `EthAddressUser` using a unique key and a patch."""
  updateEthAddressUserByUserAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEthAddressUserByUserAddressInput!
  ): UpdateEthAddressUserPayload

  """Updates a single `EthAddressUser` using a unique key and a patch."""
  updateEthAddressUserByEthAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEthAddressUserByEthAddressInput!
  ): UpdateEthAddressUserPayload

  """
  Updates a single `EventDetail` using its globally unique id and a patch.
  """
  updateEventDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventDetailInput!
  ): UpdateEventDetailPayload

  """Updates a single `EventDetail` using a unique key and a patch."""
  updateEventDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventDetailByIdInput!
  ): UpdateEventDetailPayload

  """
  Updates a single `SuperRareAcceptBid` using its globally unique id and a patch.
  """
  updateSuperRareAcceptBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareAcceptBidInput!
  ): UpdateSuperRareAcceptBidPayload

  """Updates a single `SuperRareAcceptBid` using a unique key and a patch."""
  updateSuperRareAcceptBidById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareAcceptBidByIdInput!
  ): UpdateSuperRareAcceptBidPayload

  """
  Updates a single `SuperRareAuctionDetail` using its globally unique id and a patch.
  """
  updateSuperRareAuctionDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareAuctionDetailInput!
  ): UpdateSuperRareAuctionDetailPayload

  """
  Updates a single `SuperRareAuctionDetail` using a unique key and a patch.
  """
  updateSuperRareAuctionDetailByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareAuctionDetailByTokenIdInput!
  ): UpdateSuperRareAuctionDetailPayload

  """
  Updates a single `SuperRareBid` using its globally unique id and a patch.
  """
  updateSuperRareBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareBidInput!
  ): UpdateSuperRareBidPayload

  """Updates a single `SuperRareBid` using a unique key and a patch."""
  updateSuperRareBidById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareBidByIdInput!
  ): UpdateSuperRareBidPayload

  """
  Updates a single `SuperRareCancelBid` using its globally unique id and a patch.
  """
  updateSuperRareCancelBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareCancelBidInput!
  ): UpdateSuperRareCancelBidPayload

  """Updates a single `SuperRareCancelBid` using a unique key and a patch."""
  updateSuperRareCancelBidById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareCancelBidByIdInput!
  ): UpdateSuperRareCancelBidPayload

  """
  Updates a single `SuperRareEdition` using its globally unique id and a patch.
  """
  updateSuperRareEdition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareEditionInput!
  ): UpdateSuperRareEditionPayload

  """Updates a single `SuperRareEdition` using a unique key and a patch."""
  updateSuperRareEditionByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareEditionByTokenIdInput!
  ): UpdateSuperRareEditionPayload

  """
  Updates a single `SuperRareEstimatedValue` using its globally unique id and a patch.
  """
  updateSuperRareEstimatedValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareEstimatedValueInput!
  ): UpdateSuperRareEstimatedValuePayload

  """
  Updates a single `SuperRareEstimatedValue` using a unique key and a patch.
  """
  updateSuperRareEstimatedValueByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareEstimatedValueByTokenIdInput!
  ): UpdateSuperRareEstimatedValuePayload

  """
  Updates a single `SuperRareMarketDetail` using its globally unique id and a patch.
  """
  updateSuperRareMarketDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareMarketDetailInput!
  ): UpdateSuperRareMarketDetailPayload

  """
  Updates a single `SuperRareMarketDetail` using a unique key and a patch.
  """
  updateSuperRareMarketDetailByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareMarketDetailByTokenIdInput!
  ): UpdateSuperRareMarketDetailPayload

  """
  Updates a single `SuperRareSalePriceSet` using its globally unique id and a patch.
  """
  updateSuperRareSalePriceSet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareSalePriceSetInput!
  ): UpdateSuperRareSalePriceSetPayload

  """
  Updates a single `SuperRareSalePriceSet` using a unique key and a patch.
  """
  updateSuperRareSalePriceSetById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareSalePriceSetByIdInput!
  ): UpdateSuperRareSalePriceSetPayload

  """
  Updates a single `SuperRareSizedImage` using its globally unique id and a patch.
  """
  updateSuperRareSizedImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareSizedImageInput!
  ): UpdateSuperRareSizedImagePayload

  """Updates a single `SuperRareSizedImage` using a unique key and a patch."""
  updateSuperRareSizedImageByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareSizedImageByTokenIdInput!
  ): UpdateSuperRareSizedImagePayload

  """
  Updates a single `SuperRareSold` using its globally unique id and a patch.
  """
  updateSuperRareSold(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareSoldInput!
  ): UpdateSuperRareSoldPayload

  """Updates a single `SuperRareSold` using a unique key and a patch."""
  updateSuperRareSoldById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareSoldByIdInput!
  ): UpdateSuperRareSoldPayload

  """Updates a single `SuperRareTag` using a unique key and a patch."""
  updateSuperRareTagByTokenIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareTagByTokenIdAndNameInput!
  ): UpdateSuperRareTagPayload

  """
  Updates a single `SuperRareTokenCreator` using its globally unique id and a patch.
  """
  updateSuperRareTokenCreator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareTokenCreatorInput!
  ): UpdateSuperRareTokenCreatorPayload

  """
  Updates a single `SuperRareTokenCreator` using a unique key and a patch.
  """
  updateSuperRareTokenCreatorByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSuperRareTokenCreatorByTokenIdInput!
  ): UpdateSuperRareTokenCreatorPayload

  """Updates a single `TokenLike` using its globally unique id and a patch."""
  updateTokenLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTokenLikeInput!
  ): UpdateTokenLikePayload

  """Updates a single `TokenLike` using a unique key and a patch."""
  updateTokenLikeByAddressAndTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTokenLikeByAddressAndTokenIdInput!
  ): UpdateTokenLikePayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEthaddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEthaddressInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEthereumAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEthereumAddressInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """
  Updates a single `UserTracking` using its globally unique id and a patch.
  """
  updateUserTracking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTrackingInput!
  ): UpdateUserTrackingPayload

  """Updates a single `UserTracking` using a unique key and a patch."""
  updateUserTrackingByRefidAndTokenid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserTrackingByRefidAndTokenidInput!
  ): UpdateUserTrackingPayload

  """
  Updates a single `HeraldEvent` using its globally unique id and a patch.
  """
  updateHeraldEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeraldEventInput!
  ): UpdateHeraldEventPayload

  """Updates a single `HeraldEvent` using a unique key and a patch."""
  updateHeraldEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeraldEventByIdInput!
  ): UpdateHeraldEventPayload

  """Updates a single `HeraldEvent` using a unique key and a patch."""
  updateHeraldEventByEventIdAndNotifierType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeraldEventByEventIdAndNotifierTypeInput!
  ): UpdateHeraldEventPayload

  """Updates a single `NftLike` using its globally unique id and a patch."""
  updateNftLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNftLikeInput!
  ): UpdateNftLikePayload

  """Updates a single `NftLike` using a unique key and a patch."""
  updateNftLikeByAddressAndTokenIdAndContractAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNftLikeByAddressAndTokenIdAndContractAddressInput!
  ): UpdateNftLikePayload

  """Updates a single `NftView` using a unique key and a patch."""
  updateNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreated(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreatedInput!
  ): UpdateNftViewPayload

  """
  Updates a single `SegmentNotification` using its globally unique id and a patch.
  """
  updateSegmentNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSegmentNotificationInput!
  ): UpdateSegmentNotificationPayload

  """Updates a single `SegmentNotification` using a unique key and a patch."""
  updateSegmentNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSegmentNotificationByIdInput!
  ): UpdateSegmentNotificationPayload

  """Updates a single `SegmentNotification` using a unique key and a patch."""
  updateSegmentNotificationByNftEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSegmentNotificationByNftEventIdInput!
  ): UpdateSegmentNotificationPayload

  """Updates a single `SegmentNotification` using a unique key and a patch."""
  updateSegmentNotificationByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSegmentNotificationByUserIdInput!
  ): UpdateSegmentNotificationPayload

  """
  Updates a single `SentEmailNotification` using its globally unique id and a patch.
  """
  updateSentEmailNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSentEmailNotificationInput!
  ): UpdateSentEmailNotificationPayload

  """
  Updates a single `SentEmailNotification` using a unique key and a patch.
  """
  updateSentEmailNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSentEmailNotificationByIdInput!
  ): UpdateSentEmailNotificationPayload

  """
  Updates a single `SentEmailNotification` using a unique key and a patch.
  """
  updateSentEmailNotificationByNftEventIdAndNotificationTypeAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSentEmailNotificationByNftEventIdAndNotificationTypeAndUserIdInput!
  ): UpdateSentEmailNotificationPayload

  """
  Updates a single `UserAppNotification` using its globally unique id and a patch.
  """
  updateUserAppNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAppNotificationInput!
  ): UpdateUserAppNotificationPayload

  """Updates a single `UserAppNotification` using a unique key and a patch."""
  updateUserAppNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAppNotificationByIdInput!
  ): UpdateUserAppNotificationPayload

  """
  Updates a single `UserNotificationSetting` using its globally unique id and a patch.
  """
  updateUserNotificationSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserNotificationSettingInput!
  ): UpdateUserNotificationSettingPayload

  """
  Updates a single `UserNotificationSetting` using a unique key and a patch.
  """
  updateUserNotificationSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserNotificationSettingByIdInput!
  ): UpdateUserNotificationSettingPayload

  """
  Updates a single `UserNotificationSetting` using a unique key and a patch.
  """
  updateUserNotificationSettingByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserNotificationSettingByUserIdInput!
  ): UpdateUserNotificationSettingPayload

  """Deletes a single `FlywaySchemaHistory` using its globally unique id."""
  deleteFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `FlywaySchemaHistory` using a unique key."""
  deleteFlywaySchemaHistoryByInstalledRank(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryByInstalledRankInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `Erc721Metadatum` using its globally unique id."""
  deleteErc721Metadatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteErc721MetadatumInput!
  ): DeleteErc721MetadatumPayload

  """Deletes a single `Erc721Metadatum` using a unique key."""
  deleteErc721MetadatumByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteErc721MetadatumByTokenIdInput!
  ): DeleteErc721MetadatumPayload

  """Deletes a single `Erc721Token` using its globally unique id."""
  deleteErc721Token(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteErc721TokenInput!
  ): DeleteErc721TokenPayload

  """Deletes a single `Erc721Token` using a unique key."""
  deleteErc721TokenByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteErc721TokenByTokenIdInput!
  ): DeleteErc721TokenPayload

  """Deletes a single `Erc721Transfer` using its globally unique id."""
  deleteErc721Transfer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteErc721TransferInput!
  ): DeleteErc721TransferPayload

  """Deletes a single `Erc721Transfer` using a unique key."""
  deleteErc721TransferById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteErc721TransferByIdInput!
  ): DeleteErc721TransferPayload

  """Deletes a single `EthAddressUser` using its globally unique id."""
  deleteEthAddressUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEthAddressUserInput!
  ): DeleteEthAddressUserPayload

  """Deletes a single `EthAddressUser` using a unique key."""
  deleteEthAddressUserByUserAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEthAddressUserByUserAddressInput!
  ): DeleteEthAddressUserPayload

  """Deletes a single `EthAddressUser` using a unique key."""
  deleteEthAddressUserByEthAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEthAddressUserByEthAddressInput!
  ): DeleteEthAddressUserPayload

  """Deletes a single `EventDetail` using its globally unique id."""
  deleteEventDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventDetailInput!
  ): DeleteEventDetailPayload

  """Deletes a single `EventDetail` using a unique key."""
  deleteEventDetailById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventDetailByIdInput!
  ): DeleteEventDetailPayload

  """Deletes a single `SuperRareAcceptBid` using its globally unique id."""
  deleteSuperRareAcceptBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareAcceptBidInput!
  ): DeleteSuperRareAcceptBidPayload

  """Deletes a single `SuperRareAcceptBid` using a unique key."""
  deleteSuperRareAcceptBidById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareAcceptBidByIdInput!
  ): DeleteSuperRareAcceptBidPayload

  """
  Deletes a single `SuperRareAuctionDetail` using its globally unique id.
  """
  deleteSuperRareAuctionDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareAuctionDetailInput!
  ): DeleteSuperRareAuctionDetailPayload

  """Deletes a single `SuperRareAuctionDetail` using a unique key."""
  deleteSuperRareAuctionDetailByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareAuctionDetailByTokenIdInput!
  ): DeleteSuperRareAuctionDetailPayload

  """Deletes a single `SuperRareBid` using its globally unique id."""
  deleteSuperRareBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareBidInput!
  ): DeleteSuperRareBidPayload

  """Deletes a single `SuperRareBid` using a unique key."""
  deleteSuperRareBidById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareBidByIdInput!
  ): DeleteSuperRareBidPayload

  """Deletes a single `SuperRareCancelBid` using its globally unique id."""
  deleteSuperRareCancelBid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareCancelBidInput!
  ): DeleteSuperRareCancelBidPayload

  """Deletes a single `SuperRareCancelBid` using a unique key."""
  deleteSuperRareCancelBidById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareCancelBidByIdInput!
  ): DeleteSuperRareCancelBidPayload

  """Deletes a single `SuperRareEdition` using its globally unique id."""
  deleteSuperRareEdition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareEditionInput!
  ): DeleteSuperRareEditionPayload

  """Deletes a single `SuperRareEdition` using a unique key."""
  deleteSuperRareEditionByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareEditionByTokenIdInput!
  ): DeleteSuperRareEditionPayload

  """
  Deletes a single `SuperRareEstimatedValue` using its globally unique id.
  """
  deleteSuperRareEstimatedValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareEstimatedValueInput!
  ): DeleteSuperRareEstimatedValuePayload

  """Deletes a single `SuperRareEstimatedValue` using a unique key."""
  deleteSuperRareEstimatedValueByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareEstimatedValueByTokenIdInput!
  ): DeleteSuperRareEstimatedValuePayload

  """Deletes a single `SuperRareMarketDetail` using its globally unique id."""
  deleteSuperRareMarketDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareMarketDetailInput!
  ): DeleteSuperRareMarketDetailPayload

  """Deletes a single `SuperRareMarketDetail` using a unique key."""
  deleteSuperRareMarketDetailByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareMarketDetailByTokenIdInput!
  ): DeleteSuperRareMarketDetailPayload

  """Deletes a single `SuperRareSalePriceSet` using its globally unique id."""
  deleteSuperRareSalePriceSet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareSalePriceSetInput!
  ): DeleteSuperRareSalePriceSetPayload

  """Deletes a single `SuperRareSalePriceSet` using a unique key."""
  deleteSuperRareSalePriceSetById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareSalePriceSetByIdInput!
  ): DeleteSuperRareSalePriceSetPayload

  """Deletes a single `SuperRareSizedImage` using its globally unique id."""
  deleteSuperRareSizedImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareSizedImageInput!
  ): DeleteSuperRareSizedImagePayload

  """Deletes a single `SuperRareSizedImage` using a unique key."""
  deleteSuperRareSizedImageByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareSizedImageByTokenIdInput!
  ): DeleteSuperRareSizedImagePayload

  """Deletes a single `SuperRareSold` using its globally unique id."""
  deleteSuperRareSold(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareSoldInput!
  ): DeleteSuperRareSoldPayload

  """Deletes a single `SuperRareSold` using a unique key."""
  deleteSuperRareSoldById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareSoldByIdInput!
  ): DeleteSuperRareSoldPayload

  """Deletes a single `SuperRareTag` using a unique key."""
  deleteSuperRareTagByTokenIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareTagByTokenIdAndNameInput!
  ): DeleteSuperRareTagPayload

  """Deletes a single `SuperRareTokenCreator` using its globally unique id."""
  deleteSuperRareTokenCreator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareTokenCreatorInput!
  ): DeleteSuperRareTokenCreatorPayload

  """Deletes a single `SuperRareTokenCreator` using a unique key."""
  deleteSuperRareTokenCreatorByTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSuperRareTokenCreatorByTokenIdInput!
  ): DeleteSuperRareTokenCreatorPayload

  """Deletes a single `TokenLike` using its globally unique id."""
  deleteTokenLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTokenLikeInput!
  ): DeleteTokenLikePayload

  """Deletes a single `TokenLike` using a unique key."""
  deleteTokenLikeByAddressAndTokenId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTokenLikeByAddressAndTokenIdInput!
  ): DeleteTokenLikePayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEthaddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEthaddressInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEthereumAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEthereumAddressInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `UserTracking` using its globally unique id."""
  deleteUserTracking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTrackingInput!
  ): DeleteUserTrackingPayload

  """Deletes a single `UserTracking` using a unique key."""
  deleteUserTrackingByRefidAndTokenid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserTrackingByRefidAndTokenidInput!
  ): DeleteUserTrackingPayload

  """Deletes a single `HeraldEvent` using its globally unique id."""
  deleteHeraldEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeraldEventInput!
  ): DeleteHeraldEventPayload

  """Deletes a single `HeraldEvent` using a unique key."""
  deleteHeraldEventById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeraldEventByIdInput!
  ): DeleteHeraldEventPayload

  """Deletes a single `HeraldEvent` using a unique key."""
  deleteHeraldEventByEventIdAndNotifierType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeraldEventByEventIdAndNotifierTypeInput!
  ): DeleteHeraldEventPayload

  """Deletes a single `NftLike` using its globally unique id."""
  deleteNftLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNftLikeInput!
  ): DeleteNftLikePayload

  """Deletes a single `NftLike` using a unique key."""
  deleteNftLikeByAddressAndTokenIdAndContractAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNftLikeByAddressAndTokenIdAndContractAddressInput!
  ): DeleteNftLikePayload

  """Deletes a single `NftView` using a unique key."""
  deleteNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreated(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreatedInput!
  ): DeleteNftViewPayload

  """Deletes a single `SegmentNotification` using its globally unique id."""
  deleteSegmentNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSegmentNotificationInput!
  ): DeleteSegmentNotificationPayload

  """Deletes a single `SegmentNotification` using a unique key."""
  deleteSegmentNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSegmentNotificationByIdInput!
  ): DeleteSegmentNotificationPayload

  """Deletes a single `SegmentNotification` using a unique key."""
  deleteSegmentNotificationByNftEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSegmentNotificationByNftEventIdInput!
  ): DeleteSegmentNotificationPayload

  """Deletes a single `SegmentNotification` using a unique key."""
  deleteSegmentNotificationByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSegmentNotificationByUserIdInput!
  ): DeleteSegmentNotificationPayload

  """Deletes a single `SentEmailNotification` using its globally unique id."""
  deleteSentEmailNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSentEmailNotificationInput!
  ): DeleteSentEmailNotificationPayload

  """Deletes a single `SentEmailNotification` using a unique key."""
  deleteSentEmailNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSentEmailNotificationByIdInput!
  ): DeleteSentEmailNotificationPayload

  """Deletes a single `SentEmailNotification` using a unique key."""
  deleteSentEmailNotificationByNftEventIdAndNotificationTypeAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSentEmailNotificationByNftEventIdAndNotificationTypeAndUserIdInput!
  ): DeleteSentEmailNotificationPayload

  """Deletes a single `UserAppNotification` using its globally unique id."""
  deleteUserAppNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAppNotificationInput!
  ): DeleteUserAppNotificationPayload

  """Deletes a single `UserAppNotification` using a unique key."""
  deleteUserAppNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAppNotificationByIdInput!
  ): DeleteUserAppNotificationPayload

  """
  Deletes a single `UserNotificationSetting` using its globally unique id.
  """
  deleteUserNotificationSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserNotificationSettingInput!
  ): DeleteUserNotificationSettingPayload

  """Deletes a single `UserNotificationSetting` using a unique key."""
  deleteUserNotificationSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserNotificationSettingByIdInput!
  ): DeleteUserNotificationSettingPayload

  """Deletes a single `UserNotificationSetting` using a unique key."""
  deleteUserNotificationSettingByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserNotificationSettingByUserIdInput!
  ): DeleteUserNotificationSettingPayload
  markUserAppNotificationsRead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MarkUserAppNotificationsReadInput!
  ): MarkUserAppNotificationsReadPayload
  removeUserAppNotificationsWithNftEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveUserAppNotificationsWithNftEventIdInput!
  ): RemoveUserAppNotificationsWithNftEventIdPayload
}

type NftLike implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  address: String!
  tokenId: Float!
  contractAddress: String!
  dateCreated: Datetime!

  """Reads a single `User` that is related to this `NftLike`."""
  userByAddress: User
}

"""
A condition to be used against `NftLike` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NftLikeCondition {
  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime
}

"""
A filter to be used against `NftLike` object types. All fields are combined with a logical ‘and.’
"""
input NftLikeFilter {
  """Filter by the object’s `address` field."""
  address: StringFilter

  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [NftLikeFilter!]

  """Checks for any expressions in this list."""
  or: [NftLikeFilter!]

  """Negates the expression."""
  not: NftLikeFilter
}

"""An input for mutations affecting `NftLike`"""
input NftLikeInput {
  address: String!
  tokenId: Float!
  contractAddress: String!
  dateCreated: Datetime
}

"""
Represents an update to a `NftLike`. Fields that are set will be updated.
"""
input NftLikePatch {
  address: String
  tokenId: Float
  contractAddress: String
  dateCreated: Datetime
}

"""A connection to a list of `NftLike` values."""
type NftLikesConnection {
  """A list of `NftLike` objects."""
  nodes: [NftLike]!

  """
  A list of edges which contains the `NftLike` and cursor to aid in pagination.
  """
  edges: [NftLikesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NftLike` you could get from the connection."""
  totalCount: Int!
}

"""A `NftLike` edge in the connection."""
type NftLikesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NftLike` at the end of the edge."""
  node: NftLike
}

"""Methods to use when ordering `NftLike`."""
enum NftLikesOrderBy {
  NATURAL
  ADDRESS_ASC
  ADDRESS_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_ADDRESS__EMAIL_ASC
  USER_BY_ADDRESS__EMAIL_DESC
  USER_BY_ADDRESS__USERNAME_ASC
  USER_BY_ADDRESS__USERNAME_DESC
  USER_BY_ADDRESS__ETHADDRESS_ASC
  USER_BY_ADDRESS__ETHADDRESS_DESC
  USER_BY_ADDRESS__FULLNAME_ASC
  USER_BY_ADDRESS__FULLNAME_DESC
  USER_BY_ADDRESS__LOCATION_ASC
  USER_BY_ADDRESS__LOCATION_DESC
  USER_BY_ADDRESS__BIO_ASC
  USER_BY_ADDRESS__BIO_DESC
  USER_BY_ADDRESS__ISVERIFIED_ASC
  USER_BY_ADDRESS__ISVERIFIED_DESC
  USER_BY_ADDRESS__AVATAR_ASC
  USER_BY_ADDRESS__AVATAR_DESC
  USER_BY_ADDRESS__WEBSITE_ASC
  USER_BY_ADDRESS__WEBSITE_DESC
  USER_BY_ADDRESS__INSTAGRAMLINK_ASC
  USER_BY_ADDRESS__INSTAGRAMLINK_DESC
  USER_BY_ADDRESS__TWITTERLINK_ASC
  USER_BY_ADDRESS__TWITTERLINK_DESC
  USER_BY_ADDRESS__STEEMITLINK_ASC
  USER_BY_ADDRESS__STEEMITLINK_DESC
  USER_BY_ADDRESS__SPOTIFYLINK_ASC
  USER_BY_ADDRESS__SPOTIFYLINK_DESC
  USER_BY_ADDRESS__SOUNDCLOUDLINK_ASC
  USER_BY_ADDRESS__SOUNDCLOUDLINK_DESC
  USER_BY_ADDRESS__CREATEDAT_ASC
  USER_BY_ADDRESS__CREATEDAT_DESC
  USER_BY_ADDRESS__ETHEREUM_ADDRESS_ASC
  USER_BY_ADDRESS__ETHEREUM_ADDRESS_DESC
  USER_BY_ADDRESS__ID_ASC
  USER_BY_ADDRESS__ID_DESC
  USER_BY_ADDRESS__CREATED_AT_ASC
  USER_BY_ADDRESS__CREATED_AT_DESC
  USER_BY_ADDRESS__INSTAGRAM_URL_ASC
  USER_BY_ADDRESS__INSTAGRAM_URL_DESC
  USER_BY_ADDRESS__CRYPTOVOXELS_URL_ASC
  USER_BY_ADDRESS__CRYPTOVOXELS_URL_DESC
  USER_BY_ADDRESS__NOISE_FILTER_ASC
  USER_BY_ADDRESS__NOISE_FILTER_DESC
  USER_BY_ADDRESS__BROWSER_NOTIFICATIONS_ASC
  USER_BY_ADDRESS__BROWSER_NOTIFICATIONS_DESC
}

type NftView {
  fingerprint: String!
  address: String
  tokenId: Float!
  contractAddress: String!
  dateCreated: Datetime!
  dayCreated: Date!
}

"""
A condition to be used against `NftView` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NftViewCondition {
  """Checks for equality with the object’s `fingerprint` field."""
  fingerprint: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dayCreated` field."""
  dayCreated: Date
}

"""
A filter to be used against `NftView` object types. All fields are combined with a logical ‘and.’
"""
input NftViewFilter {
  """Filter by the object’s `fingerprint` field."""
  fingerprint: StringFilter

  """Filter by the object’s `address` field."""
  address: StringFilter

  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dayCreated` field."""
  dayCreated: DateFilter

  """Checks for all expressions in this list."""
  and: [NftViewFilter!]

  """Checks for any expressions in this list."""
  or: [NftViewFilter!]

  """Negates the expression."""
  not: NftViewFilter
}

"""An input for mutations affecting `NftView`"""
input NftViewInput {
  fingerprint: String!
  address: String
  tokenId: Float!
  contractAddress: String!
  dateCreated: Datetime
  dayCreated: Date
}

"""
Represents an update to a `NftView`. Fields that are set will be updated.
"""
input NftViewPatch {
  fingerprint: String
  address: String
  tokenId: Float
  contractAddress: String
  dateCreated: Datetime
  dayCreated: Date
}

"""A connection to a list of `NftView` values."""
type NftViewsConnection {
  """A list of `NftView` objects."""
  nodes: [NftView]!

  """
  A list of edges which contains the `NftView` and cursor to aid in pagination.
  """
  edges: [NftViewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NftView` you could get from the connection."""
  totalCount: Int!
}

"""A `NftView` edge in the connection."""
type NftViewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NftView` at the end of the edge."""
  node: NftView
}

"""Methods to use when ordering `NftView`."""
enum NftViewsOrderBy {
  NATURAL
  FINGERPRINT_ASC
  FINGERPRINT_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DAY_CREATED_ASC
  DAY_CREATED_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `FlywaySchemaHistory`."""
  allFlywaySchemaHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FlywaySchemaHistoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FlywaySchemaHistoryFilter
  ): FlywaySchemaHistoriesConnection

  """Reads and enables pagination through a set of `Erc721Metadatum`."""
  allErc721Metadata(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Metadatum`."""
    orderBy: [Erc721MetadataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721MetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721MetadatumFilter
  ): Erc721MetadataConnection

  """Reads and enables pagination through a set of `Erc721Token`."""
  allErc721Tokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Token`."""
    orderBy: [Erc721TokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TokenFilter
  ): Erc721TokensConnection

  """Reads and enables pagination through a set of `Erc721Transfer`."""
  allErc721Transfers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Erc721TransferCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TransferFilter
  ): Erc721TransfersConnection

  """Reads and enables pagination through a set of `EthAddressUser`."""
  allEthAddressUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EthAddressUser`."""
    orderBy: [EthAddressUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EthAddressUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EthAddressUserFilter
  ): EthAddressUsersConnection

  """Reads and enables pagination through a set of `EventDetail`."""
  allEventDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventDetail`."""
    orderBy: [EventDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventDetailFilter
  ): EventDetailsConnection

  """Reads and enables pagination through a set of `SuperRareAcceptBid`."""
  allSuperRareAcceptBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAcceptBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAcceptBidFilter
  ): SuperRareAcceptBidsConnection

  """
  Reads and enables pagination through a set of `SuperRareAuctionDetail`.
  """
  allSuperRareAuctionDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareAuctionDetail`."""
    orderBy: [SuperRareAuctionDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareAuctionDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareAuctionDetailFilter
  ): SuperRareAuctionDetailsConnection

  """Reads and enables pagination through a set of `SuperRareBid`."""
  allSuperRareBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareBidFilter
  ): SuperRareBidsConnection

  """Reads and enables pagination through a set of `SuperRareCancelBid`."""
  allSuperRareCancelBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareCancelBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareCancelBidFilter
  ): SuperRareCancelBidsConnection

  """Reads and enables pagination through a set of `SuperRareEdition`."""
  allSuperRareEditions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareEdition`."""
    orderBy: [SuperRareEditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareEditionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareEditionFilter
  ): SuperRareEditionsConnection

  """
  Reads and enables pagination through a set of `SuperRareEstimatedValue`.
  """
  allSuperRareEstimatedValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareEstimatedValue`."""
    orderBy: [SuperRareEstimatedValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareEstimatedValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareEstimatedValueFilter
  ): SuperRareEstimatedValuesConnection

  """Reads and enables pagination through a set of `SuperRareMarketDetail`."""
  allSuperRareMarketDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareMarketDetail`."""
    orderBy: [SuperRareMarketDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareMarketDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareMarketDetailFilter
  ): SuperRareMarketDetailsConnection

  """Reads and enables pagination through a set of `SuperRareSalePriceSet`."""
  allSuperRareSalePriceSets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSalePriceSet`."""
    orderBy: [SuperRareSalePriceSetsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSalePriceSetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSalePriceSetFilter
  ): SuperRareSalePriceSetsConnection

  """Reads and enables pagination through a set of `SuperRareSizedImage`."""
  allSuperRareSizedImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSizedImage`."""
    orderBy: [SuperRareSizedImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSizedImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSizedImageFilter
  ): SuperRareSizedImagesConnection

  """Reads and enables pagination through a set of `SuperRareSold`."""
  allSuperRareSolds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareSoldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareSoldFilter
  ): SuperRareSoldsConnection

  """Reads and enables pagination through a set of `SuperRareTag`."""
  allSuperRareTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareTag`."""
    orderBy: [SuperRareTagsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareTagFilter
  ): SuperRareTagsConnection

  """Reads and enables pagination through a set of `SuperRareTokenCreator`."""
  allSuperRareTokenCreators(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SuperRareTokenCreator`."""
    orderBy: [SuperRareTokenCreatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SuperRareTokenCreatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SuperRareTokenCreatorFilter
  ): SuperRareTokenCreatorsConnection

  """Reads and enables pagination through a set of `TokenLike`."""
  allTokenLikes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenLike`."""
    orderBy: [TokenLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenLikeFilter
  ): TokenLikesConnection

  """Reads and enables pagination through a set of `TokenView`."""
  allTokenViews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenView`."""
    orderBy: [TokenViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenViewFilter
  ): TokenViewsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `UserTracking`."""
  allUserTrackings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserTracking`."""
    orderBy: [UserTrackingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserTrackingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserTrackingFilter
  ): UserTrackingsConnection

  """Reads and enables pagination through a set of `HeraldEvent`."""
  allHeraldEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HeraldEvent`."""
    orderBy: [HeraldEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HeraldEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HeraldEventFilter
  ): HeraldEventsConnection

  """Reads and enables pagination through a set of `NftLike`."""
  allNftLikes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftLike`."""
    orderBy: [NftLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftLikeFilter
  ): NftLikesConnection

  """Reads and enables pagination through a set of `NftView`."""
  allNftViews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftView`."""
    orderBy: [NftViewsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftViewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftViewFilter
  ): NftViewsConnection

  """Reads and enables pagination through a set of `SegmentNotification`."""
  allSegmentNotifications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SegmentNotification`."""
    orderBy: [SegmentNotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SegmentNotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SegmentNotificationFilter
  ): SegmentNotificationsConnection

  """Reads and enables pagination through a set of `SentEmailNotification`."""
  allSentEmailNotifications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SentEmailNotification`."""
    orderBy: [SentEmailNotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SentEmailNotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SentEmailNotificationFilter
  ): SentEmailNotificationsConnection

  """Reads and enables pagination through a set of `TopArtist`."""
  allTopArtists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TopArtist`."""
    orderBy: [TopArtistsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopArtistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopArtistFilter
  ): TopArtistsConnection

  """Reads and enables pagination through a set of `TopCollector`."""
  allTopCollectors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TopCollector`."""
    orderBy: [TopCollectorsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopCollectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopCollectorFilter
  ): TopCollectorsConnection

  """Reads and enables pagination through a set of `UserAppNotification`."""
  allUserAppNotifications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAppNotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAppNotificationFilter
  ): UserAppNotificationsConnection

  """
  Reads and enables pagination through a set of `UserNotificationSetting`.
  """
  allUserNotificationSettings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserNotificationSetting`."""
    orderBy: [UserNotificationSettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserNotificationSettingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserNotificationSettingFilter
  ): UserNotificationSettingsConnection
  flywaySchemaHistoryByInstalledRank(installedRank: Int!): FlywaySchemaHistory
  erc721MetadatumByTokenId(tokenId: Float!): Erc721Metadatum
  erc721TokenByTokenId(tokenId: Float!): Erc721Token
  erc721TransferById(id: String!): Erc721Transfer
  ethAddressUserByUserAddress(userAddress: String!): EthAddressUser
  ethAddressUserByEthAddress(ethAddress: String!): EthAddressUser
  eventDetailById(id: String!): EventDetail
  superRareAcceptBidById(id: String!): SuperRareAcceptBid
  superRareAuctionDetailByTokenId(tokenId: Float!): SuperRareAuctionDetail
  superRareBidById(id: String!): SuperRareBid
  superRareCancelBidById(id: String!): SuperRareCancelBid
  superRareEditionByTokenId(tokenId: Float!): SuperRareEdition
  superRareEstimatedValueByTokenId(tokenId: Float!): SuperRareEstimatedValue
  superRareMarketDetailByTokenId(tokenId: Float!): SuperRareMarketDetail
  superRareSalePriceSetById(id: String!): SuperRareSalePriceSet
  superRareSizedImageByTokenId(tokenId: Float!): SuperRareSizedImage
  superRareSoldById(id: String!): SuperRareSold
  superRareTagByTokenIdAndName(tokenId: Float!, name: String!): SuperRareTag
  superRareTokenCreatorByTokenId(tokenId: Float!): SuperRareTokenCreator
  tokenLikeByAddressAndTokenId(address: String!, tokenId: Float!): TokenLike
  userByUsername(username: String!): User
  userByEthaddress(ethaddress: String!): User
  userByEthereumAddress(ethereumAddress: String!): User
  userById(id: BigInt!): User
  userTrackingByRefidAndTokenid(refid: String!, tokenid: Float!): UserTracking
  heraldEventById(id: BigInt!): HeraldEvent
  heraldEventByEventIdAndNotifierType(eventId: String!, notifierType: HeraldNotifierType!): HeraldEvent
  nftLikeByAddressAndTokenIdAndContractAddress(address: String!, tokenId: Float!, contractAddress: String!): NftLike
  nftViewByFingerprintAndTokenIdAndContractAddressAndDayCreated(fingerprint: String!, tokenId: Float!, contractAddress: String!, dayCreated: Date!): NftView
  segmentNotificationById(id: BigInt!): SegmentNotification
  segmentNotificationByNftEventId(nftEventId: String!): SegmentNotification
  segmentNotificationByUserId(userId: BigInt!): SegmentNotification
  sentEmailNotificationById(id: BigInt!): SentEmailNotification
  sentEmailNotificationByNftEventIdAndNotificationTypeAndUserId(nftEventId: String!, notificationType: UserNotificationType!, userId: BigInt!): SentEmailNotification
  userAppNotificationById(id: BigInt!): UserAppNotification
  userNotificationSettingById(id: BigInt!): UserNotificationSetting
  userNotificationSettingByUserId(userId: BigInt!): UserNotificationSetting
  isUsersAddress(_address: String!): Boolean

  """Reads and enables pagination through a set of `TxEvent`."""
  ethAddressTxHistory(
    ethAddress: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TxEventFilter
  ): TxEventsConnection!
  getGeneralSuperrareStats: GeneralSuperrareStat

  """Reads and enables pagination through a set of `EventDetail`."""
  highestBidEvents(
    startDate: Datetime
    endDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventDetailFilter
  ): EventDetailsConnection!

  """Reads and enables pagination through a set of `EventDetail`."""
  highestSoldEvents(
    startDate: Datetime
    endDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventDetailFilter
  ): EventDetailsConnection!

  """Reads and enables pagination through a set of `Erc721Token`."""
  highestViewedTokens(
    startDate: Datetime
    endDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TokenFilter
  ): Erc721TokensConnection!

  """Reads and enables pagination through a set of `EventDetail`."""
  recentActivity(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventDetailFilter
  ): EventDetailsConnection!

  """Reads and enables pagination through a set of `EventDetail`."""
  recentActivityByAddress(
    address: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventDetailFilter
  ): EventDetailsConnection!

  """Reads and enables pagination through a set of `EventDetail`."""
  recentActivityByTokenId(
    tokenId: Float

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventDetailFilter
  ): EventDetailsConnection!

  """Reads and enables pagination through a set of `Erc721Token`."""
  tokensCreatedBetween(
    startDate: Datetime
    endDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: Erc721TokenFilter
  ): Erc721TokensConnection!

  """Reads and enables pagination through a set of `User`."""
  artistsCreatedBetween(
    startDate: Datetime
    endDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `User`."""
  followUpUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!
  nftEventUserAppNotification(userId: BigInt!, notificationType: UserNotificationType!, nftEventId: String!): UserAppNotification
  userByCaseInsensitiveUsername(username: String): User

  """Reads a single `FlywaySchemaHistory` using its globally unique `ID`."""
  flywaySchemaHistory(
    """
    The globally unique `ID` to be used in selecting a single `FlywaySchemaHistory`.
    """
    nodeId: ID!
  ): FlywaySchemaHistory

  """Reads a single `Erc721Metadatum` using its globally unique `ID`."""
  erc721Metadatum(
    """
    The globally unique `ID` to be used in selecting a single `Erc721Metadatum`.
    """
    nodeId: ID!
  ): Erc721Metadatum

  """Reads a single `Erc721Token` using its globally unique `ID`."""
  erc721Token(
    """
    The globally unique `ID` to be used in selecting a single `Erc721Token`.
    """
    nodeId: ID!
  ): Erc721Token

  """Reads a single `Erc721Transfer` using its globally unique `ID`."""
  erc721Transfer(
    """
    The globally unique `ID` to be used in selecting a single `Erc721Transfer`.
    """
    nodeId: ID!
  ): Erc721Transfer

  """Reads a single `EthAddressUser` using its globally unique `ID`."""
  ethAddressUser(
    """
    The globally unique `ID` to be used in selecting a single `EthAddressUser`.
    """
    nodeId: ID!
  ): EthAddressUser

  """Reads a single `EventDetail` using its globally unique `ID`."""
  eventDetail(
    """
    The globally unique `ID` to be used in selecting a single `EventDetail`.
    """
    nodeId: ID!
  ): EventDetail

  """Reads a single `SuperRareAcceptBid` using its globally unique `ID`."""
  superRareAcceptBid(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareAcceptBid`.
    """
    nodeId: ID!
  ): SuperRareAcceptBid

  """
  Reads a single `SuperRareAuctionDetail` using its globally unique `ID`.
  """
  superRareAuctionDetail(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareAuctionDetail`.
    """
    nodeId: ID!
  ): SuperRareAuctionDetail

  """Reads a single `SuperRareBid` using its globally unique `ID`."""
  superRareBid(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareBid`.
    """
    nodeId: ID!
  ): SuperRareBid

  """Reads a single `SuperRareCancelBid` using its globally unique `ID`."""
  superRareCancelBid(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareCancelBid`.
    """
    nodeId: ID!
  ): SuperRareCancelBid

  """Reads a single `SuperRareEdition` using its globally unique `ID`."""
  superRareEdition(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareEdition`.
    """
    nodeId: ID!
  ): SuperRareEdition

  """
  Reads a single `SuperRareEstimatedValue` using its globally unique `ID`.
  """
  superRareEstimatedValue(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareEstimatedValue`.
    """
    nodeId: ID!
  ): SuperRareEstimatedValue

  """Reads a single `SuperRareMarketDetail` using its globally unique `ID`."""
  superRareMarketDetail(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareMarketDetail`.
    """
    nodeId: ID!
  ): SuperRareMarketDetail

  """Reads a single `SuperRareSalePriceSet` using its globally unique `ID`."""
  superRareSalePriceSet(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareSalePriceSet`.
    """
    nodeId: ID!
  ): SuperRareSalePriceSet

  """Reads a single `SuperRareSizedImage` using its globally unique `ID`."""
  superRareSizedImage(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareSizedImage`.
    """
    nodeId: ID!
  ): SuperRareSizedImage

  """Reads a single `SuperRareSold` using its globally unique `ID`."""
  superRareSold(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareSold`.
    """
    nodeId: ID!
  ): SuperRareSold

  """Reads a single `SuperRareTokenCreator` using its globally unique `ID`."""
  superRareTokenCreator(
    """
    The globally unique `ID` to be used in selecting a single `SuperRareTokenCreator`.
    """
    nodeId: ID!
  ): SuperRareTokenCreator

  """Reads a single `TokenLike` using its globally unique `ID`."""
  tokenLike(
    """The globally unique `ID` to be used in selecting a single `TokenLike`."""
    nodeId: ID!
  ): TokenLike

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserTracking` using its globally unique `ID`."""
  userTracking(
    """
    The globally unique `ID` to be used in selecting a single `UserTracking`.
    """
    nodeId: ID!
  ): UserTracking

  """Reads a single `HeraldEvent` using its globally unique `ID`."""
  heraldEvent(
    """
    The globally unique `ID` to be used in selecting a single `HeraldEvent`.
    """
    nodeId: ID!
  ): HeraldEvent

  """Reads a single `NftLike` using its globally unique `ID`."""
  nftLike(
    """The globally unique `ID` to be used in selecting a single `NftLike`."""
    nodeId: ID!
  ): NftLike

  """Reads a single `SegmentNotification` using its globally unique `ID`."""
  segmentNotification(
    """
    The globally unique `ID` to be used in selecting a single `SegmentNotification`.
    """
    nodeId: ID!
  ): SegmentNotification

  """Reads a single `SentEmailNotification` using its globally unique `ID`."""
  sentEmailNotification(
    """
    The globally unique `ID` to be used in selecting a single `SentEmailNotification`.
    """
    nodeId: ID!
  ): SentEmailNotification

  """Reads a single `UserAppNotification` using its globally unique `ID`."""
  userAppNotification(
    """
    The globally unique `ID` to be used in selecting a single `UserAppNotification`.
    """
    nodeId: ID!
  ): UserAppNotification

  """
  Reads a single `UserNotificationSetting` using its globally unique `ID`.
  """
  userNotificationSetting(
    """
    The globally unique `ID` to be used in selecting a single `UserNotificationSetting`.
    """
    nodeId: ID!
  ): UserNotificationSetting
}

"""All input for the `removeUserAppNotificationsWithNftEventId` mutation."""
input RemoveUserAppNotificationsWithNftEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: String!
  userId: BigInt!
}

"""The output of our `removeUserAppNotificationsWithNftEventId` mutation."""
type RemoveUserAppNotificationsWithNftEventIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userAppNotification: UserAppNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAppNotification`."""
  userByUserId: User

  """An edge for our `UserAppNotification`. May be used by Relay 1."""
  userAppNotificationEdge(
    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAppNotificationsEdge
}

"""Notifications that were sent to Segment."""
type SegmentNotification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique id of the Segment notification."""
  id: BigInt!

  """
  The nft event id tracked by Segmemt. It is the block hash appended with the log index.
  """
  nftEventId: String

  """The user id identified."""
  userId: BigInt

  """When the notification was sent."""
  processedAt: Datetime!
}

"""
A condition to be used against `SegmentNotification` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SegmentNotificationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `nftEventId` field."""
  nftEventId: String

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt

  """Checks for equality with the object’s `processedAt` field."""
  processedAt: Datetime
}

"""
A filter to be used against `SegmentNotification` object types. All fields are combined with a logical ‘and.’
"""
input SegmentNotificationFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `nftEventId` field."""
  nftEventId: StringFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter

  """Filter by the object’s `processedAt` field."""
  processedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SegmentNotificationFilter!]

  """Checks for any expressions in this list."""
  or: [SegmentNotificationFilter!]

  """Negates the expression."""
  not: SegmentNotificationFilter
}

"""An input for mutations affecting `SegmentNotification`"""
input SegmentNotificationInput {
  """Unique id of the Segment notification."""
  id: BigInt

  """
  The nft event id tracked by Segmemt. It is the block hash appended with the log index.
  """
  nftEventId: String

  """The user id identified."""
  userId: BigInt

  """When the notification was sent."""
  processedAt: Datetime
}

"""
Represents an update to a `SegmentNotification`. Fields that are set will be updated.
"""
input SegmentNotificationPatch {
  """Unique id of the Segment notification."""
  id: BigInt

  """
  The nft event id tracked by Segmemt. It is the block hash appended with the log index.
  """
  nftEventId: String

  """The user id identified."""
  userId: BigInt

  """When the notification was sent."""
  processedAt: Datetime
}

"""A connection to a list of `SegmentNotification` values."""
type SegmentNotificationsConnection {
  """A list of `SegmentNotification` objects."""
  nodes: [SegmentNotification]!

  """
  A list of edges which contains the `SegmentNotification` and cursor to aid in pagination.
  """
  edges: [SegmentNotificationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SegmentNotification` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SegmentNotification` edge in the connection."""
type SegmentNotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SegmentNotification` at the end of the edge."""
  node: SegmentNotification
}

"""Methods to use when ordering `SegmentNotification`."""
enum SegmentNotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NFT_EVENT_ID_ASC
  NFT_EVENT_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PROCESSED_AT_ASC
  PROCESSED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The sent email notification ."""
type SentEmailNotification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique id of the email notification."""
  id: BigInt!

  """
  The nft event id that caused the email to be sent. It is the block hash appended with the log index.
  """
  nftEventId: String

  """The user id of the user to whom the email was sent."""
  userId: BigInt!

  """The type of email notification sent."""
  notificationType: UserNotificationType!

  """When the email was sent."""
  sentAt: Datetime!

  """Reads a single `User` that is related to this `SentEmailNotification`."""
  userByUserId: User
}

"""
A condition to be used against `SentEmailNotification` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SentEmailNotificationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `nftEventId` field."""
  nftEventId: String

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt

  """Checks for equality with the object’s `notificationType` field."""
  notificationType: UserNotificationType

  """Checks for equality with the object’s `sentAt` field."""
  sentAt: Datetime
}

"""
A filter to be used against `SentEmailNotification` object types. All fields are combined with a logical ‘and.’
"""
input SentEmailNotificationFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `nftEventId` field."""
  nftEventId: StringFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter

  """Filter by the object’s `notificationType` field."""
  notificationType: UserNotificationTypeFilter

  """Filter by the object’s `sentAt` field."""
  sentAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SentEmailNotificationFilter!]

  """Checks for any expressions in this list."""
  or: [SentEmailNotificationFilter!]

  """Negates the expression."""
  not: SentEmailNotificationFilter
}

"""An input for mutations affecting `SentEmailNotification`"""
input SentEmailNotificationInput {
  """Unique id of the email notification."""
  id: BigInt

  """
  The nft event id that caused the email to be sent. It is the block hash appended with the log index.
  """
  nftEventId: String

  """The user id of the user to whom the email was sent."""
  userId: BigInt!

  """The type of email notification sent."""
  notificationType: UserNotificationType!

  """When the email was sent."""
  sentAt: Datetime
}

"""
Represents an update to a `SentEmailNotification`. Fields that are set will be updated.
"""
input SentEmailNotificationPatch {
  """Unique id of the email notification."""
  id: BigInt

  """
  The nft event id that caused the email to be sent. It is the block hash appended with the log index.
  """
  nftEventId: String

  """The user id of the user to whom the email was sent."""
  userId: BigInt

  """The type of email notification sent."""
  notificationType: UserNotificationType

  """When the email was sent."""
  sentAt: Datetime
}

"""A connection to a list of `SentEmailNotification` values."""
type SentEmailNotificationsConnection {
  """A list of `SentEmailNotification` objects."""
  nodes: [SentEmailNotification]!

  """
  A list of edges which contains the `SentEmailNotification` and cursor to aid in pagination.
  """
  edges: [SentEmailNotificationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SentEmailNotification` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SentEmailNotification` edge in the connection."""
type SentEmailNotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SentEmailNotification` at the end of the edge."""
  node: SentEmailNotification
}

"""Methods to use when ordering `SentEmailNotification`."""
enum SentEmailNotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NFT_EVENT_ID_ASC
  NFT_EVENT_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  NOTIFICATION_TYPE_ASC
  NOTIFICATION_TYPE_DESC
  SENT_AT_ASC
  SENT_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__EMAIL_ASC
  USER_BY_USER_ID__EMAIL_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__ETHADDRESS_ASC
  USER_BY_USER_ID__ETHADDRESS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__LOCATION_ASC
  USER_BY_USER_ID__LOCATION_DESC
  USER_BY_USER_ID__BIO_ASC
  USER_BY_USER_ID__BIO_DESC
  USER_BY_USER_ID__ISVERIFIED_ASC
  USER_BY_USER_ID__ISVERIFIED_DESC
  USER_BY_USER_ID__AVATAR_ASC
  USER_BY_USER_ID__AVATAR_DESC
  USER_BY_USER_ID__WEBSITE_ASC
  USER_BY_USER_ID__WEBSITE_DESC
  USER_BY_USER_ID__INSTAGRAMLINK_ASC
  USER_BY_USER_ID__INSTAGRAMLINK_DESC
  USER_BY_USER_ID__TWITTERLINK_ASC
  USER_BY_USER_ID__TWITTERLINK_DESC
  USER_BY_USER_ID__STEEMITLINK_ASC
  USER_BY_USER_ID__STEEMITLINK_DESC
  USER_BY_USER_ID__SPOTIFYLINK_ASC
  USER_BY_USER_ID__SPOTIFYLINK_DESC
  USER_BY_USER_ID__SOUNDCLOUDLINK_ASC
  USER_BY_USER_ID__SOUNDCLOUDLINK_DESC
  USER_BY_USER_ID__CREATEDAT_ASC
  USER_BY_USER_ID__CREATEDAT_DESC
  USER_BY_USER_ID__ETHEREUM_ADDRESS_ASC
  USER_BY_USER_ID__ETHEREUM_ADDRESS_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__CREATED_AT_ASC
  USER_BY_USER_ID__CREATED_AT_DESC
  USER_BY_USER_ID__INSTAGRAM_URL_ASC
  USER_BY_USER_ID__INSTAGRAM_URL_DESC
  USER_BY_USER_ID__CRYPTOVOXELS_URL_ASC
  USER_BY_USER_ID__CRYPTOVOXELS_URL_DESC
  USER_BY_USER_ID__NOISE_FILTER_ASC
  USER_BY_USER_ID__NOISE_FILTER_DESC
  USER_BY_USER_ID__BROWSER_NOTIFICATIONS_ASC
  USER_BY_USER_ID__BROWSER_NOTIFICATIONS_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  listen(topic: String!): ListenPayload!
}

type SuperRareAcceptBid implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float
  seller: String!
  bidder: String!
  amount: Float!
  contractAddress: String!
  id: String!

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAcceptBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareAcceptBid`.
  """
  eventDetailById: EventDetail
}

"""
A condition to be used against `SuperRareAcceptBid` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SuperRareAcceptBidCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `seller` field."""
  seller: String

  """Checks for equality with the object’s `bidder` field."""
  bidder: String

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `SuperRareAcceptBid` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareAcceptBidFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `seller` field."""
  seller: StringFilter

  """Filter by the object’s `bidder` field."""
  bidder: StringFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareAcceptBidFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareAcceptBidFilter!]

  """Negates the expression."""
  not: SuperRareAcceptBidFilter
}

"""An input for mutations affecting `SuperRareAcceptBid`"""
input SuperRareAcceptBidInput {
  tokenId: Float
  seller: String!
  bidder: String!
  amount: Float!
  contractAddress: String!
  id: String!
}

"""
Represents an update to a `SuperRareAcceptBid`. Fields that are set will be updated.
"""
input SuperRareAcceptBidPatch {
  tokenId: Float
  seller: String
  bidder: String
  amount: Float
  contractAddress: String
  id: String
}

"""A connection to a list of `SuperRareAcceptBid` values."""
type SuperRareAcceptBidsConnection {
  """A list of `SuperRareAcceptBid` objects."""
  nodes: [SuperRareAcceptBid]!

  """
  A list of edges which contains the `SuperRareAcceptBid` and cursor to aid in pagination.
  """
  edges: [SuperRareAcceptBidsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareAcceptBid` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareAcceptBid` edge in the connection."""
type SuperRareAcceptBidsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareAcceptBid` at the end of the edge."""
  node: SuperRareAcceptBid
}

"""Methods to use when ordering `SuperRareAcceptBid`."""
enum SuperRareAcceptBidsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  SELLER_ASC
  SELLER_DESC
  BIDDER_ASC
  BIDDER_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  ETH_ADDRESS_USER_BY_SELLER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_SELLER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_SELLER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_SELLER__ETH_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_BIDDER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BIDDER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_BIDDER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BIDDER__ETH_ADDRESS_DESC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_ASC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_ASC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_DESC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_ASC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_DESC
  EVENT_DETAIL_BY_ID__LOG_INDEX_ASC
  EVENT_DETAIL_BY_ID__LOG_INDEX_DESC
  EVENT_DETAIL_BY_ID__ID_ASC
  EVENT_DETAIL_BY_ID__ID_DESC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_ASC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_DESC
}

type SuperRareAuctionDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  currentBidder: String
  currentBid: Float

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAuctionDetail`.
  """
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `SuperRareAuctionDetail` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SuperRareAuctionDetailCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `currentBidder` field."""
  currentBidder: String

  """Checks for equality with the object’s `currentBid` field."""
  currentBid: Float
}

"""
A filter to be used against `SuperRareAuctionDetail` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareAuctionDetailFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `currentBidder` field."""
  currentBidder: StringFilter

  """Filter by the object’s `currentBid` field."""
  currentBid: FloatFilter

  """Checks for all expressions in this list."""
  and: [SuperRareAuctionDetailFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareAuctionDetailFilter!]

  """Negates the expression."""
  not: SuperRareAuctionDetailFilter
}

"""An input for mutations affecting `SuperRareAuctionDetail`"""
input SuperRareAuctionDetailInput {
  tokenId: Float!
  currentBidder: String
  currentBid: Float
}

"""
Represents an update to a `SuperRareAuctionDetail`. Fields that are set will be updated.
"""
input SuperRareAuctionDetailPatch {
  tokenId: Float
  currentBidder: String
  currentBid: Float
}

"""A connection to a list of `SuperRareAuctionDetail` values."""
type SuperRareAuctionDetailsConnection {
  """A list of `SuperRareAuctionDetail` objects."""
  nodes: [SuperRareAuctionDetail]!

  """
  A list of edges which contains the `SuperRareAuctionDetail` and cursor to aid in pagination.
  """
  edges: [SuperRareAuctionDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareAuctionDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareAuctionDetail` edge in the connection."""
type SuperRareAuctionDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareAuctionDetail` at the end of the edge."""
  node: SuperRareAuctionDetail
}

"""Methods to use when ordering `SuperRareAuctionDetail`."""
enum SuperRareAuctionDetailsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  CURRENT_BIDDER_ASC
  CURRENT_BIDDER_DESC
  CURRENT_BID_ASC
  CURRENT_BID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type SuperRareBid implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float
  bidder: String!
  amount: Float!
  contractAddress: String!
  id: String!

  """Reads a single `Erc721Token` that is related to this `SuperRareBid`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareBid`."""
  eventDetailById: EventDetail
}

"""
A condition to be used against `SuperRareBid` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SuperRareBidCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `bidder` field."""
  bidder: String

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `SuperRareBid` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareBidFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `bidder` field."""
  bidder: StringFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareBidFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareBidFilter!]

  """Negates the expression."""
  not: SuperRareBidFilter
}

"""An input for mutations affecting `SuperRareBid`"""
input SuperRareBidInput {
  tokenId: Float
  bidder: String!
  amount: Float!
  contractAddress: String!
  id: String!
}

"""
Represents an update to a `SuperRareBid`. Fields that are set will be updated.
"""
input SuperRareBidPatch {
  tokenId: Float
  bidder: String
  amount: Float
  contractAddress: String
  id: String
}

"""A connection to a list of `SuperRareBid` values."""
type SuperRareBidsConnection {
  """A list of `SuperRareBid` objects."""
  nodes: [SuperRareBid]!

  """
  A list of edges which contains the `SuperRareBid` and cursor to aid in pagination.
  """
  edges: [SuperRareBidsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SuperRareBid` you could get from the connection."""
  totalCount: Int!
}

"""A `SuperRareBid` edge in the connection."""
type SuperRareBidsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareBid` at the end of the edge."""
  node: SuperRareBid
}

"""Methods to use when ordering `SuperRareBid`."""
enum SuperRareBidsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  BIDDER_ASC
  BIDDER_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  ETH_ADDRESS_USER_BY_BIDDER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BIDDER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_BIDDER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BIDDER__ETH_ADDRESS_DESC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_ASC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_ASC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_DESC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_ASC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_DESC
  EVENT_DETAIL_BY_ID__LOG_INDEX_ASC
  EVENT_DETAIL_BY_ID__LOG_INDEX_DESC
  EVENT_DETAIL_BY_ID__ID_ASC
  EVENT_DETAIL_BY_ID__ID_DESC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_ASC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_DESC
}

type SuperRareCancelBid implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float
  bidder: String!
  amount: Float!
  contractAddress: String!
  id: String!

  """
  Reads a single `Erc721Token` that is related to this `SuperRareCancelBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareCancelBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareCancelBid`.
  """
  eventDetailById: EventDetail
}

"""
A condition to be used against `SuperRareCancelBid` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SuperRareCancelBidCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `bidder` field."""
  bidder: String

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `SuperRareCancelBid` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareCancelBidFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `bidder` field."""
  bidder: StringFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareCancelBidFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareCancelBidFilter!]

  """Negates the expression."""
  not: SuperRareCancelBidFilter
}

"""An input for mutations affecting `SuperRareCancelBid`"""
input SuperRareCancelBidInput {
  tokenId: Float
  bidder: String!
  amount: Float!
  contractAddress: String!
  id: String!
}

"""
Represents an update to a `SuperRareCancelBid`. Fields that are set will be updated.
"""
input SuperRareCancelBidPatch {
  tokenId: Float
  bidder: String
  amount: Float
  contractAddress: String
  id: String
}

"""A connection to a list of `SuperRareCancelBid` values."""
type SuperRareCancelBidsConnection {
  """A list of `SuperRareCancelBid` objects."""
  nodes: [SuperRareCancelBid]!

  """
  A list of edges which contains the `SuperRareCancelBid` and cursor to aid in pagination.
  """
  edges: [SuperRareCancelBidsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareCancelBid` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareCancelBid` edge in the connection."""
type SuperRareCancelBidsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareCancelBid` at the end of the edge."""
  node: SuperRareCancelBid
}

"""Methods to use when ordering `SuperRareCancelBid`."""
enum SuperRareCancelBidsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  BIDDER_ASC
  BIDDER_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  ETH_ADDRESS_USER_BY_BIDDER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BIDDER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_BIDDER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BIDDER__ETH_ADDRESS_DESC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_ASC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_ASC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_DESC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_ASC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_DESC
  EVENT_DETAIL_BY_ID__LOG_INDEX_ASC
  EVENT_DETAIL_BY_ID__LOG_INDEX_DESC
  EVENT_DETAIL_BY_ID__ID_ASC
  EVENT_DETAIL_BY_ID__ID_DESC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_ASC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_DESC
}

type SuperRareEdition implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  metadataUri: String!
  number: Int
  total: Int

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEdition`.
  """
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `SuperRareEdition` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SuperRareEditionCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `metadataUri` field."""
  metadataUri: String

  """Checks for equality with the object’s `number` field."""
  number: Int

  """Checks for equality with the object’s `total` field."""
  total: Int
}

"""
A filter to be used against `SuperRareEdition` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareEditionFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `metadataUri` field."""
  metadataUri: StringFilter

  """Filter by the object’s `number` field."""
  number: IntFilter

  """Filter by the object’s `total` field."""
  total: IntFilter

  """Checks for all expressions in this list."""
  and: [SuperRareEditionFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareEditionFilter!]

  """Negates the expression."""
  not: SuperRareEditionFilter
}

"""An input for mutations affecting `SuperRareEdition`"""
input SuperRareEditionInput {
  tokenId: Float!
  metadataUri: String!
  number: Int
  total: Int
}

"""
Represents an update to a `SuperRareEdition`. Fields that are set will be updated.
"""
input SuperRareEditionPatch {
  tokenId: Float
  metadataUri: String
  number: Int
  total: Int
}

"""A connection to a list of `SuperRareEdition` values."""
type SuperRareEditionsConnection {
  """A list of `SuperRareEdition` objects."""
  nodes: [SuperRareEdition]!

  """
  A list of edges which contains the `SuperRareEdition` and cursor to aid in pagination.
  """
  edges: [SuperRareEditionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareEdition` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareEdition` edge in the connection."""
type SuperRareEditionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareEdition` at the end of the edge."""
  node: SuperRareEdition
}

"""Methods to use when ordering `SuperRareEdition`."""
enum SuperRareEditionsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  METADATA_URI_ASC
  METADATA_URI_DESC
  NUMBER_ASC
  NUMBER_DESC
  TOTAL_ASC
  TOTAL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type SuperRareEstimatedValue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  estimatedPrice: Float

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEstimatedValue`.
  """
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `SuperRareEstimatedValue` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SuperRareEstimatedValueCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `estimatedPrice` field."""
  estimatedPrice: Float
}

"""
A filter to be used against `SuperRareEstimatedValue` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareEstimatedValueFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `estimatedPrice` field."""
  estimatedPrice: FloatFilter

  """Checks for all expressions in this list."""
  and: [SuperRareEstimatedValueFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareEstimatedValueFilter!]

  """Negates the expression."""
  not: SuperRareEstimatedValueFilter
}

"""An input for mutations affecting `SuperRareEstimatedValue`"""
input SuperRareEstimatedValueInput {
  tokenId: Float!
  estimatedPrice: Float
}

"""
Represents an update to a `SuperRareEstimatedValue`. Fields that are set will be updated.
"""
input SuperRareEstimatedValuePatch {
  tokenId: Float
  estimatedPrice: Float
}

"""A connection to a list of `SuperRareEstimatedValue` values."""
type SuperRareEstimatedValuesConnection {
  """A list of `SuperRareEstimatedValue` objects."""
  nodes: [SuperRareEstimatedValue]!

  """
  A list of edges which contains the `SuperRareEstimatedValue` and cursor to aid in pagination.
  """
  edges: [SuperRareEstimatedValuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareEstimatedValue` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareEstimatedValue` edge in the connection."""
type SuperRareEstimatedValuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareEstimatedValue` at the end of the edge."""
  node: SuperRareEstimatedValue
}

"""Methods to use when ordering `SuperRareEstimatedValue`."""
enum SuperRareEstimatedValuesOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  ESTIMATED_PRICE_ASC
  ESTIMATED_PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type SuperRareMarketDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  currentPrice: Float

  """
  Reads a single `Erc721Token` that is related to this `SuperRareMarketDetail`.
  """
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `SuperRareMarketDetail` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SuperRareMarketDetailCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `currentPrice` field."""
  currentPrice: Float
}

"""
A filter to be used against `SuperRareMarketDetail` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareMarketDetailFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `currentPrice` field."""
  currentPrice: FloatFilter

  """Checks for all expressions in this list."""
  and: [SuperRareMarketDetailFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareMarketDetailFilter!]

  """Negates the expression."""
  not: SuperRareMarketDetailFilter
}

"""An input for mutations affecting `SuperRareMarketDetail`"""
input SuperRareMarketDetailInput {
  tokenId: Float!
  currentPrice: Float
}

"""
Represents an update to a `SuperRareMarketDetail`. Fields that are set will be updated.
"""
input SuperRareMarketDetailPatch {
  tokenId: Float
  currentPrice: Float
}

"""A connection to a list of `SuperRareMarketDetail` values."""
type SuperRareMarketDetailsConnection {
  """A list of `SuperRareMarketDetail` objects."""
  nodes: [SuperRareMarketDetail]!

  """
  A list of edges which contains the `SuperRareMarketDetail` and cursor to aid in pagination.
  """
  edges: [SuperRareMarketDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareMarketDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareMarketDetail` edge in the connection."""
type SuperRareMarketDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareMarketDetail` at the end of the edge."""
  node: SuperRareMarketDetail
}

"""Methods to use when ordering `SuperRareMarketDetail`."""
enum SuperRareMarketDetailsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  CURRENT_PRICE_ASC
  CURRENT_PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type SuperRareSalePriceSet implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float
  amount: Float!
  contractAddress: String!
  id: String!

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSalePriceSet`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EventDetail` that is related to this `SuperRareSalePriceSet`.
  """
  eventDetailById: EventDetail
}

"""
A condition to be used against `SuperRareSalePriceSet` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SuperRareSalePriceSetCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `SuperRareSalePriceSet` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareSalePriceSetFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareSalePriceSetFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareSalePriceSetFilter!]

  """Negates the expression."""
  not: SuperRareSalePriceSetFilter
}

"""An input for mutations affecting `SuperRareSalePriceSet`"""
input SuperRareSalePriceSetInput {
  tokenId: Float
  amount: Float!
  contractAddress: String!
  id: String!
}

"""
Represents an update to a `SuperRareSalePriceSet`. Fields that are set will be updated.
"""
input SuperRareSalePriceSetPatch {
  tokenId: Float
  amount: Float
  contractAddress: String
  id: String
}

"""A connection to a list of `SuperRareSalePriceSet` values."""
type SuperRareSalePriceSetsConnection {
  """A list of `SuperRareSalePriceSet` objects."""
  nodes: [SuperRareSalePriceSet]!

  """
  A list of edges which contains the `SuperRareSalePriceSet` and cursor to aid in pagination.
  """
  edges: [SuperRareSalePriceSetsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareSalePriceSet` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareSalePriceSet` edge in the connection."""
type SuperRareSalePriceSetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareSalePriceSet` at the end of the edge."""
  node: SuperRareSalePriceSet
}

"""Methods to use when ordering `SuperRareSalePriceSet`."""
enum SuperRareSalePriceSetsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_ASC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_ASC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_DESC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_ASC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_DESC
  EVENT_DETAIL_BY_ID__LOG_INDEX_ASC
  EVENT_DETAIL_BY_ID__LOG_INDEX_DESC
  EVENT_DETAIL_BY_ID__ID_ASC
  EVENT_DETAIL_BY_ID__ID_DESC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_ASC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_DESC
}

type SuperRareSizedImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  thumbnail: String!
  standard: String!

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSizedImage`.
  """
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `SuperRareSizedImage` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SuperRareSizedImageCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `thumbnail` field."""
  thumbnail: String

  """Checks for equality with the object’s `standard` field."""
  standard: String
}

"""
A filter to be used against `SuperRareSizedImage` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareSizedImageFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `thumbnail` field."""
  thumbnail: StringFilter

  """Filter by the object’s `standard` field."""
  standard: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareSizedImageFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareSizedImageFilter!]

  """Negates the expression."""
  not: SuperRareSizedImageFilter
}

"""An input for mutations affecting `SuperRareSizedImage`"""
input SuperRareSizedImageInput {
  tokenId: Float!
  thumbnail: String!
  standard: String!
}

"""
Represents an update to a `SuperRareSizedImage`. Fields that are set will be updated.
"""
input SuperRareSizedImagePatch {
  tokenId: Float
  thumbnail: String
  standard: String
}

"""A connection to a list of `SuperRareSizedImage` values."""
type SuperRareSizedImagesConnection {
  """A list of `SuperRareSizedImage` objects."""
  nodes: [SuperRareSizedImage]!

  """
  A list of edges which contains the `SuperRareSizedImage` and cursor to aid in pagination.
  """
  edges: [SuperRareSizedImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareSizedImage` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareSizedImage` edge in the connection."""
type SuperRareSizedImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareSizedImage` at the end of the edge."""
  node: SuperRareSizedImage
}

"""Methods to use when ordering `SuperRareSizedImage`."""
enum SuperRareSizedImagesOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  THUMBNAIL_ASC
  THUMBNAIL_DESC
  STANDARD_ASC
  STANDARD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type SuperRareSold implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float
  seller: String!
  buyer: String!
  amount: Float!
  contractAddress: String!
  id: String!

  """Reads a single `Erc721Token` that is related to this `SuperRareSold`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserByBuyer: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareSold`."""
  eventDetailById: EventDetail
}

"""
A condition to be used against `SuperRareSold` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SuperRareSoldCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `seller` field."""
  seller: String

  """Checks for equality with the object’s `buyer` field."""
  buyer: String

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `contractAddress` field."""
  contractAddress: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `SuperRareSold` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareSoldFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `seller` field."""
  seller: StringFilter

  """Filter by the object’s `buyer` field."""
  buyer: StringFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `contractAddress` field."""
  contractAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareSoldFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareSoldFilter!]

  """Negates the expression."""
  not: SuperRareSoldFilter
}

"""An input for mutations affecting `SuperRareSold`"""
input SuperRareSoldInput {
  tokenId: Float
  seller: String!
  buyer: String!
  amount: Float!
  contractAddress: String!
  id: String!
}

"""
Represents an update to a `SuperRareSold`. Fields that are set will be updated.
"""
input SuperRareSoldPatch {
  tokenId: Float
  seller: String
  buyer: String
  amount: Float
  contractAddress: String
  id: String
}

"""A connection to a list of `SuperRareSold` values."""
type SuperRareSoldsConnection {
  """A list of `SuperRareSold` objects."""
  nodes: [SuperRareSold]!

  """
  A list of edges which contains the `SuperRareSold` and cursor to aid in pagination.
  """
  edges: [SuperRareSoldsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SuperRareSold` you could get from the connection."""
  totalCount: Int!
}

"""A `SuperRareSold` edge in the connection."""
type SuperRareSoldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareSold` at the end of the edge."""
  node: SuperRareSold
}

"""Methods to use when ordering `SuperRareSold`."""
enum SuperRareSoldsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  SELLER_ASC
  SELLER_DESC
  BUYER_ASC
  BUYER_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CONTRACT_ADDRESS_ASC
  CONTRACT_ADDRESS_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  ETH_ADDRESS_USER_BY_SELLER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_SELLER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_SELLER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_SELLER__ETH_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_BUYER__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BUYER__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_BUYER__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_BUYER__ETH_ADDRESS_DESC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_ASC
  EVENT_DETAIL_BY_ID__BLOCK_NUMBER_DESC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_ASC
  EVENT_DETAIL_BY_ID__BLOCK_TIMESTAMP_DESC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_ASC
  EVENT_DETAIL_BY_ID__BLOCK_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_HASH_DESC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_ASC
  EVENT_DETAIL_BY_ID__TRANSACTION_INDEX_DESC
  EVENT_DETAIL_BY_ID__LOG_INDEX_ASC
  EVENT_DETAIL_BY_ID__LOG_INDEX_DESC
  EVENT_DETAIL_BY_ID__ID_ASC
  EVENT_DETAIL_BY_ID__ID_DESC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_ASC
  EVENT_DETAIL_BY_ID__CONTRACT_ADDRESS_DESC
}

type SuperRareTag {
  tokenId: Float
  name: String!

  """Reads a single `Erc721Token` that is related to this `SuperRareTag`."""
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `SuperRareTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SuperRareTagCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `SuperRareTag` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareTagFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareTagFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareTagFilter!]

  """Negates the expression."""
  not: SuperRareTagFilter
}

"""An input for mutations affecting `SuperRareTag`"""
input SuperRareTagInput {
  tokenId: Float
  name: String!
}

"""
Represents an update to a `SuperRareTag`. Fields that are set will be updated.
"""
input SuperRareTagPatch {
  tokenId: Float
  name: String
}

"""A connection to a list of `SuperRareTag` values."""
type SuperRareTagsConnection {
  """A list of `SuperRareTag` objects."""
  nodes: [SuperRareTag]!

  """
  A list of edges which contains the `SuperRareTag` and cursor to aid in pagination.
  """
  edges: [SuperRareTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SuperRareTag` you could get from the connection."""
  totalCount: Int!
}

"""A `SuperRareTag` edge in the connection."""
type SuperRareTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareTag` at the end of the edge."""
  node: SuperRareTag
}

"""Methods to use when ordering `SuperRareTag`."""
enum SuperRareTagsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  NAME_ASC
  NAME_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type SuperRareTokenCreator implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tokenId: Float!
  address: String!

  """
  Reads a single `Erc721Token` that is related to this `SuperRareTokenCreator`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareTokenCreator`.
  """
  ethAddressUserByAddress: EthAddressUser
}

"""
A condition to be used against `SuperRareTokenCreator` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SuperRareTokenCreatorCondition {
  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `address` field."""
  address: String
}

"""
A filter to be used against `SuperRareTokenCreator` object types. All fields are combined with a logical ‘and.’
"""
input SuperRareTokenCreatorFilter {
  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `address` field."""
  address: StringFilter

  """Checks for all expressions in this list."""
  and: [SuperRareTokenCreatorFilter!]

  """Checks for any expressions in this list."""
  or: [SuperRareTokenCreatorFilter!]

  """Negates the expression."""
  not: SuperRareTokenCreatorFilter
}

"""An input for mutations affecting `SuperRareTokenCreator`"""
input SuperRareTokenCreatorInput {
  tokenId: Float!
  address: String!
}

"""
Represents an update to a `SuperRareTokenCreator`. Fields that are set will be updated.
"""
input SuperRareTokenCreatorPatch {
  tokenId: Float
  address: String
}

"""A connection to a list of `SuperRareTokenCreator` values."""
type SuperRareTokenCreatorsConnection {
  """A list of `SuperRareTokenCreator` objects."""
  nodes: [SuperRareTokenCreator]!

  """
  A list of edges which contains the `SuperRareTokenCreator` and cursor to aid in pagination.
  """
  edges: [SuperRareTokenCreatorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SuperRareTokenCreator` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SuperRareTokenCreator` edge in the connection."""
type SuperRareTokenCreatorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SuperRareTokenCreator` at the end of the edge."""
  node: SuperRareTokenCreator
}

"""Methods to use when ordering `SuperRareTokenCreator`."""
enum SuperRareTokenCreatorsOrderBy {
  NATURAL
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
  ETH_ADDRESS_USER_BY_ADDRESS__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ADDRESS__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_ADDRESS__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ADDRESS__ETH_ADDRESS_DESC
}

type TokenLike implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  address: String!
  tokenId: Float!
  dateCreated: Datetime!

  """Reads a single `EthAddressUser` that is related to this `TokenLike`."""
  ethAddressUserByAddress: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `TokenLike`."""
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `TokenLike` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TokenLikeCondition {
  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime
}

"""
A filter to be used against `TokenLike` object types. All fields are combined with a logical ‘and.’
"""
input TokenLikeFilter {
  """Filter by the object’s `address` field."""
  address: StringFilter

  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [TokenLikeFilter!]

  """Checks for any expressions in this list."""
  or: [TokenLikeFilter!]

  """Negates the expression."""
  not: TokenLikeFilter
}

"""An input for mutations affecting `TokenLike`"""
input TokenLikeInput {
  address: String!
  tokenId: Float!
  dateCreated: Datetime
}

"""
Represents an update to a `TokenLike`. Fields that are set will be updated.
"""
input TokenLikePatch {
  address: String
  tokenId: Float
  dateCreated: Datetime
}

"""A connection to a list of `TokenLike` values."""
type TokenLikesConnection {
  """A list of `TokenLike` objects."""
  nodes: [TokenLike]!

  """
  A list of edges which contains the `TokenLike` and cursor to aid in pagination.
  """
  edges: [TokenLikesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TokenLike` you could get from the connection."""
  totalCount: Int!
}

"""A `TokenLike` edge in the connection."""
type TokenLikesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TokenLike` at the end of the edge."""
  node: TokenLike
}

"""Methods to use when ordering `TokenLike`."""
enum TokenLikesOrderBy {
  NATURAL
  ADDRESS_ASC
  ADDRESS_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ETH_ADDRESS_USER_BY_ADDRESS__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ADDRESS__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_ADDRESS__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ADDRESS__ETH_ADDRESS_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type TokenView {
  fingerprint: String!
  address: String
  tokenId: Float!
  dateCreated: Datetime!

  """Reads a single `EthAddressUser` that is related to this `TokenView`."""
  ethAddressUserByAddress: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `TokenView`."""
  erc721TokenByTokenId: Erc721Token
}

"""
A condition to be used against `TokenView` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TokenViewCondition {
  """Checks for equality with the object’s `fingerprint` field."""
  fingerprint: String

  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: Float

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime
}

"""
A filter to be used against `TokenView` object types. All fields are combined with a logical ‘and.’
"""
input TokenViewFilter {
  """Filter by the object’s `fingerprint` field."""
  fingerprint: StringFilter

  """Filter by the object’s `address` field."""
  address: StringFilter

  """Filter by the object’s `tokenId` field."""
  tokenId: FloatFilter

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [TokenViewFilter!]

  """Checks for any expressions in this list."""
  or: [TokenViewFilter!]

  """Negates the expression."""
  not: TokenViewFilter
}

"""An input for mutations affecting `TokenView`"""
input TokenViewInput {
  fingerprint: String!
  address: String
  tokenId: Float!
  dateCreated: Datetime
}

"""A connection to a list of `TokenView` values."""
type TokenViewsConnection {
  """A list of `TokenView` objects."""
  nodes: [TokenView]!

  """
  A list of edges which contains the `TokenView` and cursor to aid in pagination.
  """
  edges: [TokenViewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TokenView` you could get from the connection."""
  totalCount: Int!
}

"""A `TokenView` edge in the connection."""
type TokenViewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TokenView` at the end of the edge."""
  node: TokenView
}

"""Methods to use when ordering `TokenView`."""
enum TokenViewsOrderBy {
  NATURAL
  FINGERPRINT_ASC
  FINGERPRINT_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  ETH_ADDRESS_USER_BY_ADDRESS__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ADDRESS__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_ADDRESS__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ADDRESS__ETH_ADDRESS_DESC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_ASC
  ERC721_TOKEN_BY_TOKEN_ID__TOKEN_ID_DESC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_ASC
  ERC721_TOKEN_BY_TOKEN_ID__OWNER_DESC
}

type TopArtist {
  ethAddress: String
  numberOfCreations: Int
  numberOfSales: Int
  totalSales: Float
  numberOfBids: Int
  averageSalePrice: Float

  """Reads a single `EthAddressUser` that is related to this `TopArtist`."""
  ethAddressUserByEthAddress: EthAddressUser
}

"""
A condition to be used against `TopArtist` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TopArtistCondition {
  """Checks for equality with the object’s `ethAddress` field."""
  ethAddress: String

  """Checks for equality with the object’s `numberOfCreations` field."""
  numberOfCreations: Int

  """Checks for equality with the object’s `numberOfSales` field."""
  numberOfSales: Int

  """Checks for equality with the object’s `totalSales` field."""
  totalSales: Float

  """Checks for equality with the object’s `numberOfBids` field."""
  numberOfBids: Int

  """Checks for equality with the object’s `averageSalePrice` field."""
  averageSalePrice: Float
}

"""
A filter to be used against `TopArtist` object types. All fields are combined with a logical ‘and.’
"""
input TopArtistFilter {
  """Filter by the object’s `ethAddress` field."""
  ethAddress: StringFilter

  """Filter by the object’s `numberOfCreations` field."""
  numberOfCreations: IntFilter

  """Filter by the object’s `numberOfSales` field."""
  numberOfSales: IntFilter

  """Filter by the object’s `totalSales` field."""
  totalSales: FloatFilter

  """Filter by the object’s `numberOfBids` field."""
  numberOfBids: IntFilter

  """Filter by the object’s `averageSalePrice` field."""
  averageSalePrice: FloatFilter

  """Checks for all expressions in this list."""
  and: [TopArtistFilter!]

  """Checks for any expressions in this list."""
  or: [TopArtistFilter!]

  """Negates the expression."""
  not: TopArtistFilter
}

"""A connection to a list of `TopArtist` values."""
type TopArtistsConnection {
  """A list of `TopArtist` objects."""
  nodes: [TopArtist]!

  """
  A list of edges which contains the `TopArtist` and cursor to aid in pagination.
  """
  edges: [TopArtistsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TopArtist` you could get from the connection."""
  totalCount: Int!
}

"""A `TopArtist` edge in the connection."""
type TopArtistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TopArtist` at the end of the edge."""
  node: TopArtist
}

"""Methods to use when ordering `TopArtist`."""
enum TopArtistsOrderBy {
  NATURAL
  ETH_ADDRESS_ASC
  ETH_ADDRESS_DESC
  NUMBER_OF_CREATIONS_ASC
  NUMBER_OF_CREATIONS_DESC
  NUMBER_OF_SALES_ASC
  NUMBER_OF_SALES_DESC
  TOTAL_SALES_ASC
  TOTAL_SALES_DESC
  NUMBER_OF_BIDS_ASC
  NUMBER_OF_BIDS_DESC
  AVERAGE_SALE_PRICE_ASC
  AVERAGE_SALE_PRICE_DESC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__ETH_ADDRESS_DESC
}

type TopCollector {
  ethAddress: String
  numberOfPieces: Int
  numberOfPurchases: Int
  totalPurchases: Float
  numberOfSales: Int
  averageSalePrice: Float
  totalSales: Float

  """
  Reads a single `EthAddressUser` that is related to this `TopCollector`.
  """
  ethAddressUserByEthAddress: EthAddressUser
}

"""
A condition to be used against `TopCollector` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TopCollectorCondition {
  """Checks for equality with the object’s `ethAddress` field."""
  ethAddress: String

  """Checks for equality with the object’s `numberOfPieces` field."""
  numberOfPieces: Int

  """Checks for equality with the object’s `numberOfPurchases` field."""
  numberOfPurchases: Int

  """Checks for equality with the object’s `totalPurchases` field."""
  totalPurchases: Float

  """Checks for equality with the object’s `numberOfSales` field."""
  numberOfSales: Int

  """Checks for equality with the object’s `averageSalePrice` field."""
  averageSalePrice: Float

  """Checks for equality with the object’s `totalSales` field."""
  totalSales: Float
}

"""
A filter to be used against `TopCollector` object types. All fields are combined with a logical ‘and.’
"""
input TopCollectorFilter {
  """Filter by the object’s `ethAddress` field."""
  ethAddress: StringFilter

  """Filter by the object’s `numberOfPieces` field."""
  numberOfPieces: IntFilter

  """Filter by the object’s `numberOfPurchases` field."""
  numberOfPurchases: IntFilter

  """Filter by the object’s `totalPurchases` field."""
  totalPurchases: FloatFilter

  """Filter by the object’s `numberOfSales` field."""
  numberOfSales: IntFilter

  """Filter by the object’s `averageSalePrice` field."""
  averageSalePrice: FloatFilter

  """Filter by the object’s `totalSales` field."""
  totalSales: FloatFilter

  """Checks for all expressions in this list."""
  and: [TopCollectorFilter!]

  """Checks for any expressions in this list."""
  or: [TopCollectorFilter!]

  """Negates the expression."""
  not: TopCollectorFilter
}

"""A connection to a list of `TopCollector` values."""
type TopCollectorsConnection {
  """A list of `TopCollector` objects."""
  nodes: [TopCollector]!

  """
  A list of edges which contains the `TopCollector` and cursor to aid in pagination.
  """
  edges: [TopCollectorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TopCollector` you could get from the connection."""
  totalCount: Int!
}

"""A `TopCollector` edge in the connection."""
type TopCollectorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TopCollector` at the end of the edge."""
  node: TopCollector
}

"""Methods to use when ordering `TopCollector`."""
enum TopCollectorsOrderBy {
  NATURAL
  ETH_ADDRESS_ASC
  ETH_ADDRESS_DESC
  NUMBER_OF_PIECES_ASC
  NUMBER_OF_PIECES_DESC
  NUMBER_OF_PURCHASES_ASC
  NUMBER_OF_PURCHASES_DESC
  TOTAL_PURCHASES_ASC
  TOTAL_PURCHASES_DESC
  NUMBER_OF_SALES_ASC
  NUMBER_OF_SALES_DESC
  AVERAGE_SALE_PRICE_ASC
  AVERAGE_SALE_PRICE_DESC
  TOTAL_SALES_ASC
  TOTAL_SALES_DESC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_ETH_ADDRESS__ETH_ADDRESS_DESC
}

type TxEvent {
  eventDate: Datetime
  eventType: String
  amount: Float
}

"""
A filter to be used against `TxEvent` object types. All fields are combined with a logical ‘and.’
"""
input TxEventFilter {
  """Filter by the object’s `eventDate` field."""
  eventDate: DatetimeFilter

  """Filter by the object’s `eventType` field."""
  eventType: StringFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Checks for all expressions in this list."""
  and: [TxEventFilter!]

  """Checks for any expressions in this list."""
  or: [TxEventFilter!]

  """Negates the expression."""
  not: TxEventFilter
}

"""A connection to a list of `TxEvent` values."""
type TxEventsConnection {
  """A list of `TxEvent` objects."""
  nodes: [TxEvent]!

  """
  A list of edges which contains the `TxEvent` and cursor to aid in pagination.
  """
  edges: [TxEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TxEvent` you could get from the connection."""
  totalCount: Int!
}

"""A `TxEvent` edge in the connection."""
type TxEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TxEvent` at the end of the edge."""
  node: TxEvent
}

"""All input for the `updateErc721MetadatumByTokenId` mutation."""
input UpdateErc721MetadatumByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Erc721Metadatum` being updated.
  """
  erc721MetadatumPatch: Erc721MetadatumPatch!
  tokenId: Float!
}

"""All input for the `updateErc721Metadatum` mutation."""
input UpdateErc721MetadatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Erc721Metadatum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Erc721Metadatum` being updated.
  """
  erc721MetadatumPatch: Erc721MetadatumPatch!
}

"""The output of our update `Erc721Metadatum` mutation."""
type UpdateErc721MetadatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Metadatum` that was updated by this mutation."""
  erc721Metadatum: Erc721Metadatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `Erc721Metadatum`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `Erc721Metadatum`. May be used by Relay 1."""
  erc721MetadatumEdge(
    """The method to use when ordering `Erc721Metadatum`."""
    orderBy: [Erc721MetadataOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721MetadataEdge
}

"""All input for the `updateErc721TokenByTokenId` mutation."""
input UpdateErc721TokenByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Erc721Token` being updated.
  """
  erc721TokenPatch: Erc721TokenPatch!
  tokenId: Float!
}

"""All input for the `updateErc721Token` mutation."""
input UpdateErc721TokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Erc721Token` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Erc721Token` being updated.
  """
  erc721TokenPatch: Erc721TokenPatch!
}

"""The output of our update `Erc721Token` mutation."""
type UpdateErc721TokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Token` that was updated by this mutation."""
  erc721Token: Erc721Token

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `Erc721Token`."""
  ethAddressUserByOwner: EthAddressUser

  """An edge for our `Erc721Token`. May be used by Relay 1."""
  erc721TokenEdge(
    """The method to use when ordering `Erc721Token`."""
    orderBy: [Erc721TokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721TokensEdge
}

"""All input for the `updateErc721TransferById` mutation."""
input UpdateErc721TransferByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Erc721Transfer` being updated.
  """
  erc721TransferPatch: Erc721TransferPatch!
  id: String!
}

"""All input for the `updateErc721Transfer` mutation."""
input UpdateErc721TransferInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Erc721Transfer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Erc721Transfer` being updated.
  """
  erc721TransferPatch: Erc721TransferPatch!
}

"""The output of our update `Erc721Transfer` mutation."""
type UpdateErc721TransferPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Erc721Transfer` that was updated by this mutation."""
  erc721Transfer: Erc721Transfer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByFrom: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `Erc721Transfer`.
  """
  ethAddressUserByTo: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `Erc721Transfer`."""
  erc721TokenByTokenId: Erc721Token

  """Reads a single `EventDetail` that is related to this `Erc721Transfer`."""
  eventDetailById: EventDetail

  """An edge for our `Erc721Transfer`. May be used by Relay 1."""
  erc721TransferEdge(
    """The method to use when ordering `Erc721Transfer`."""
    orderBy: [Erc721TransfersOrderBy!] = [PRIMARY_KEY_ASC]
  ): Erc721TransfersEdge
}

"""All input for the `updateEthAddressUserByEthAddress` mutation."""
input UpdateEthAddressUserByEthAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EthAddressUser` being updated.
  """
  ethAddressUserPatch: EthAddressUserPatch!
  ethAddress: String!
}

"""All input for the `updateEthAddressUserByUserAddress` mutation."""
input UpdateEthAddressUserByUserAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EthAddressUser` being updated.
  """
  ethAddressUserPatch: EthAddressUserPatch!
  userAddress: String!
}

"""All input for the `updateEthAddressUser` mutation."""
input UpdateEthAddressUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EthAddressUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EthAddressUser` being updated.
  """
  ethAddressUserPatch: EthAddressUserPatch!
}

"""The output of our update `EthAddressUser` mutation."""
type UpdateEthAddressUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EthAddressUser` that was updated by this mutation."""
  ethAddressUser: EthAddressUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `EthAddressUser`."""
  userByUserAddress: User

  """An edge for our `EthAddressUser`. May be used by Relay 1."""
  ethAddressUserEdge(
    """The method to use when ordering `EthAddressUser`."""
    orderBy: [EthAddressUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EthAddressUsersEdge
}

"""All input for the `updateEventDetailById` mutation."""
input UpdateEventDetailByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EventDetail` being updated.
  """
  eventDetailPatch: EventDetailPatch!
  id: String!
}

"""All input for the `updateEventDetail` mutation."""
input UpdateEventDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EventDetail` being updated.
  """
  eventDetailPatch: EventDetailPatch!
}

"""The output of our update `EventDetail` mutation."""
type UpdateEventDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventDetail` that was updated by this mutation."""
  eventDetail: EventDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `EventDetail`. May be used by Relay 1."""
  eventDetailEdge(
    """The method to use when ordering `EventDetail`."""
    orderBy: [EventDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventDetailsEdge
}

"""All input for the `updateFlywaySchemaHistoryByInstalledRank` mutation."""
input UpdateFlywaySchemaHistoryByInstalledRankInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  flywaySchemaHistoryPatch: FlywaySchemaHistoryPatch!
  installedRank: Int!
}

"""All input for the `updateFlywaySchemaHistory` mutation."""
input UpdateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  flywaySchemaHistoryPatch: FlywaySchemaHistoryPatch!
}

"""The output of our update `FlywaySchemaHistory` mutation."""
type UpdateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was updated by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge
}

"""
All input for the `updateHeraldEventByEventIdAndNotifierType` mutation.
"""
input UpdateHeraldEventByEventIdAndNotifierTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HeraldEvent` being updated.
  """
  heraldEventPatch: HeraldEventPatch!

  """
  The event id. For blockchain transactions it is the block hash appended with the log index.
  """
  eventId: String!

  """The notifier that processed the event"""
  notifierType: HeraldNotifierType!
}

"""All input for the `updateHeraldEventById` mutation."""
input UpdateHeraldEventByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HeraldEvent` being updated.
  """
  heraldEventPatch: HeraldEventPatch!

  """Unique id of the herald event."""
  id: BigInt!
}

"""All input for the `updateHeraldEvent` mutation."""
input UpdateHeraldEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HeraldEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HeraldEvent` being updated.
  """
  heraldEventPatch: HeraldEventPatch!
}

"""The output of our update `HeraldEvent` mutation."""
type UpdateHeraldEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HeraldEvent` that was updated by this mutation."""
  heraldEvent: HeraldEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HeraldEvent`. May be used by Relay 1."""
  heraldEventEdge(
    """The method to use when ordering `HeraldEvent`."""
    orderBy: [HeraldEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeraldEventsEdge
}

"""
All input for the `updateNftLikeByAddressAndTokenIdAndContractAddress` mutation.
"""
input UpdateNftLikeByAddressAndTokenIdAndContractAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NftLike` being updated.
  """
  nftLikePatch: NftLikePatch!
  address: String!
  tokenId: Float!
  contractAddress: String!
}

"""All input for the `updateNftLike` mutation."""
input UpdateNftLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NftLike` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NftLike` being updated.
  """
  nftLikePatch: NftLikePatch!
}

"""The output of our update `NftLike` mutation."""
type UpdateNftLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NftLike` that was updated by this mutation."""
  nftLike: NftLike

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `NftLike`."""
  userByAddress: User

  """An edge for our `NftLike`. May be used by Relay 1."""
  nftLikeEdge(
    """The method to use when ordering `NftLike`."""
    orderBy: [NftLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NftLikesEdge
}

"""
All input for the `updateNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreated` mutation.
"""
input UpdateNftViewByFingerprintAndTokenIdAndContractAddressAndDayCreatedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NftView` being updated.
  """
  nftViewPatch: NftViewPatch!
  fingerprint: String!
  tokenId: Float!
  contractAddress: String!
  dayCreated: Date!
}

"""The output of our update `NftView` mutation."""
type UpdateNftViewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NftView` that was updated by this mutation."""
  nftView: NftView

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NftView`. May be used by Relay 1."""
  nftViewEdge(
    """The method to use when ordering `NftView`."""
    orderBy: [NftViewsOrderBy!] = [NATURAL]
  ): NftViewsEdge
}

"""All input for the `updateSegmentNotificationById` mutation."""
input UpdateSegmentNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SegmentNotification` being updated.
  """
  segmentNotificationPatch: SegmentNotificationPatch!

  """Unique id of the Segment notification."""
  id: BigInt!
}

"""All input for the `updateSegmentNotificationByNftEventId` mutation."""
input UpdateSegmentNotificationByNftEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SegmentNotification` being updated.
  """
  segmentNotificationPatch: SegmentNotificationPatch!

  """
  The nft event id tracked by Segmemt. It is the block hash appended with the log index.
  """
  nftEventId: String!
}

"""All input for the `updateSegmentNotificationByUserId` mutation."""
input UpdateSegmentNotificationByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SegmentNotification` being updated.
  """
  segmentNotificationPatch: SegmentNotificationPatch!

  """The user id identified."""
  userId: BigInt!
}

"""All input for the `updateSegmentNotification` mutation."""
input UpdateSegmentNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SegmentNotification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SegmentNotification` being updated.
  """
  segmentNotificationPatch: SegmentNotificationPatch!
}

"""The output of our update `SegmentNotification` mutation."""
type UpdateSegmentNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SegmentNotification` that was updated by this mutation."""
  segmentNotification: SegmentNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SegmentNotification`. May be used by Relay 1."""
  segmentNotificationEdge(
    """The method to use when ordering `SegmentNotification`."""
    orderBy: [SegmentNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SegmentNotificationsEdge
}

"""All input for the `updateSentEmailNotificationById` mutation."""
input UpdateSentEmailNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SentEmailNotification` being updated.
  """
  sentEmailNotificationPatch: SentEmailNotificationPatch!

  """Unique id of the email notification."""
  id: BigInt!
}

"""
All input for the `updateSentEmailNotificationByNftEventIdAndNotificationTypeAndUserId` mutation.
"""
input UpdateSentEmailNotificationByNftEventIdAndNotificationTypeAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SentEmailNotification` being updated.
  """
  sentEmailNotificationPatch: SentEmailNotificationPatch!

  """
  The nft event id that caused the email to be sent. It is the block hash appended with the log index.
  """
  nftEventId: String!

  """The type of email notification sent."""
  notificationType: UserNotificationType!

  """The user id of the user to whom the email was sent."""
  userId: BigInt!
}

"""All input for the `updateSentEmailNotification` mutation."""
input UpdateSentEmailNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SentEmailNotification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SentEmailNotification` being updated.
  """
  sentEmailNotificationPatch: SentEmailNotificationPatch!
}

"""The output of our update `SentEmailNotification` mutation."""
type UpdateSentEmailNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SentEmailNotification` that was updated by this mutation."""
  sentEmailNotification: SentEmailNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `SentEmailNotification`."""
  userByUserId: User

  """An edge for our `SentEmailNotification`. May be used by Relay 1."""
  sentEmailNotificationEdge(
    """The method to use when ordering `SentEmailNotification`."""
    orderBy: [SentEmailNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SentEmailNotificationsEdge
}

"""All input for the `updateSuperRareAcceptBidById` mutation."""
input UpdateSuperRareAcceptBidByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareAcceptBid` being updated.
  """
  superRareAcceptBidPatch: SuperRareAcceptBidPatch!
  id: String!
}

"""All input for the `updateSuperRareAcceptBid` mutation."""
input UpdateSuperRareAcceptBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareAcceptBid` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareAcceptBid` being updated.
  """
  superRareAcceptBidPatch: SuperRareAcceptBidPatch!
}

"""The output of our update `SuperRareAcceptBid` mutation."""
type UpdateSuperRareAcceptBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareAcceptBid` that was updated by this mutation."""
  superRareAcceptBid: SuperRareAcceptBid

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAcceptBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareAcceptBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareAcceptBid`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareAcceptBid`. May be used by Relay 1."""
  superRareAcceptBidEdge(
    """The method to use when ordering `SuperRareAcceptBid`."""
    orderBy: [SuperRareAcceptBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareAcceptBidsEdge
}

"""All input for the `updateSuperRareAuctionDetailByTokenId` mutation."""
input UpdateSuperRareAuctionDetailByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareAuctionDetail` being updated.
  """
  superRareAuctionDetailPatch: SuperRareAuctionDetailPatch!
  tokenId: Float!
}

"""All input for the `updateSuperRareAuctionDetail` mutation."""
input UpdateSuperRareAuctionDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareAuctionDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareAuctionDetail` being updated.
  """
  superRareAuctionDetailPatch: SuperRareAuctionDetailPatch!
}

"""The output of our update `SuperRareAuctionDetail` mutation."""
type UpdateSuperRareAuctionDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareAuctionDetail` that was updated by this mutation."""
  superRareAuctionDetail: SuperRareAuctionDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareAuctionDetail`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareAuctionDetail`. May be used by Relay 1."""
  superRareAuctionDetailEdge(
    """The method to use when ordering `SuperRareAuctionDetail`."""
    orderBy: [SuperRareAuctionDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareAuctionDetailsEdge
}

"""All input for the `updateSuperRareBidById` mutation."""
input UpdateSuperRareBidByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareBid` being updated.
  """
  superRareBidPatch: SuperRareBidPatch!
  id: String!
}

"""All input for the `updateSuperRareBid` mutation."""
input UpdateSuperRareBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareBid` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareBid` being updated.
  """
  superRareBidPatch: SuperRareBidPatch!
}

"""The output of our update `SuperRareBid` mutation."""
type UpdateSuperRareBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareBid` that was updated by this mutation."""
  superRareBid: SuperRareBid

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareBid`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareBid`."""
  eventDetailById: EventDetail

  """An edge for our `SuperRareBid`. May be used by Relay 1."""
  superRareBidEdge(
    """The method to use when ordering `SuperRareBid`."""
    orderBy: [SuperRareBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareBidsEdge
}

"""All input for the `updateSuperRareCancelBidById` mutation."""
input UpdateSuperRareCancelBidByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareCancelBid` being updated.
  """
  superRareCancelBidPatch: SuperRareCancelBidPatch!
  id: String!
}

"""All input for the `updateSuperRareCancelBid` mutation."""
input UpdateSuperRareCancelBidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareCancelBid` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareCancelBid` being updated.
  """
  superRareCancelBidPatch: SuperRareCancelBidPatch!
}

"""The output of our update `SuperRareCancelBid` mutation."""
type UpdateSuperRareCancelBidPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareCancelBid` that was updated by this mutation."""
  superRareCancelBid: SuperRareCancelBid

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareCancelBid`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareCancelBid`.
  """
  ethAddressUserByBidder: EthAddressUser

  """
  Reads a single `EventDetail` that is related to this `SuperRareCancelBid`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareCancelBid`. May be used by Relay 1."""
  superRareCancelBidEdge(
    """The method to use when ordering `SuperRareCancelBid`."""
    orderBy: [SuperRareCancelBidsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareCancelBidsEdge
}

"""All input for the `updateSuperRareEditionByTokenId` mutation."""
input UpdateSuperRareEditionByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareEdition` being updated.
  """
  superRareEditionPatch: SuperRareEditionPatch!
  tokenId: Float!
}

"""All input for the `updateSuperRareEdition` mutation."""
input UpdateSuperRareEditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareEdition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareEdition` being updated.
  """
  superRareEditionPatch: SuperRareEditionPatch!
}

"""The output of our update `SuperRareEdition` mutation."""
type UpdateSuperRareEditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareEdition` that was updated by this mutation."""
  superRareEdition: SuperRareEdition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEdition`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareEdition`. May be used by Relay 1."""
  superRareEditionEdge(
    """The method to use when ordering `SuperRareEdition`."""
    orderBy: [SuperRareEditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareEditionsEdge
}

"""All input for the `updateSuperRareEstimatedValueByTokenId` mutation."""
input UpdateSuperRareEstimatedValueByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareEstimatedValue` being updated.
  """
  superRareEstimatedValuePatch: SuperRareEstimatedValuePatch!
  tokenId: Float!
}

"""All input for the `updateSuperRareEstimatedValue` mutation."""
input UpdateSuperRareEstimatedValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareEstimatedValue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareEstimatedValue` being updated.
  """
  superRareEstimatedValuePatch: SuperRareEstimatedValuePatch!
}

"""The output of our update `SuperRareEstimatedValue` mutation."""
type UpdateSuperRareEstimatedValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareEstimatedValue` that was updated by this mutation."""
  superRareEstimatedValue: SuperRareEstimatedValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareEstimatedValue`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareEstimatedValue`. May be used by Relay 1."""
  superRareEstimatedValueEdge(
    """The method to use when ordering `SuperRareEstimatedValue`."""
    orderBy: [SuperRareEstimatedValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareEstimatedValuesEdge
}

"""All input for the `updateSuperRareMarketDetailByTokenId` mutation."""
input UpdateSuperRareMarketDetailByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareMarketDetail` being updated.
  """
  superRareMarketDetailPatch: SuperRareMarketDetailPatch!
  tokenId: Float!
}

"""All input for the `updateSuperRareMarketDetail` mutation."""
input UpdateSuperRareMarketDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareMarketDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareMarketDetail` being updated.
  """
  superRareMarketDetailPatch: SuperRareMarketDetailPatch!
}

"""The output of our update `SuperRareMarketDetail` mutation."""
type UpdateSuperRareMarketDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareMarketDetail` that was updated by this mutation."""
  superRareMarketDetail: SuperRareMarketDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareMarketDetail`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareMarketDetail`. May be used by Relay 1."""
  superRareMarketDetailEdge(
    """The method to use when ordering `SuperRareMarketDetail`."""
    orderBy: [SuperRareMarketDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareMarketDetailsEdge
}

"""All input for the `updateSuperRareSalePriceSetById` mutation."""
input UpdateSuperRareSalePriceSetByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareSalePriceSet` being updated.
  """
  superRareSalePriceSetPatch: SuperRareSalePriceSetPatch!
  id: String!
}

"""All input for the `updateSuperRareSalePriceSet` mutation."""
input UpdateSuperRareSalePriceSetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareSalePriceSet` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareSalePriceSet` being updated.
  """
  superRareSalePriceSetPatch: SuperRareSalePriceSetPatch!
}

"""The output of our update `SuperRareSalePriceSet` mutation."""
type UpdateSuperRareSalePriceSetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSalePriceSet` that was updated by this mutation."""
  superRareSalePriceSet: SuperRareSalePriceSet

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSalePriceSet`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EventDetail` that is related to this `SuperRareSalePriceSet`.
  """
  eventDetailById: EventDetail

  """An edge for our `SuperRareSalePriceSet`. May be used by Relay 1."""
  superRareSalePriceSetEdge(
    """The method to use when ordering `SuperRareSalePriceSet`."""
    orderBy: [SuperRareSalePriceSetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSalePriceSetsEdge
}

"""All input for the `updateSuperRareSizedImageByTokenId` mutation."""
input UpdateSuperRareSizedImageByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareSizedImage` being updated.
  """
  superRareSizedImagePatch: SuperRareSizedImagePatch!
  tokenId: Float!
}

"""All input for the `updateSuperRareSizedImage` mutation."""
input UpdateSuperRareSizedImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareSizedImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareSizedImage` being updated.
  """
  superRareSizedImagePatch: SuperRareSizedImagePatch!
}

"""The output of our update `SuperRareSizedImage` mutation."""
type UpdateSuperRareSizedImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSizedImage` that was updated by this mutation."""
  superRareSizedImage: SuperRareSizedImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareSizedImage`.
  """
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareSizedImage`. May be used by Relay 1."""
  superRareSizedImageEdge(
    """The method to use when ordering `SuperRareSizedImage`."""
    orderBy: [SuperRareSizedImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSizedImagesEdge
}

"""All input for the `updateSuperRareSoldById` mutation."""
input UpdateSuperRareSoldByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareSold` being updated.
  """
  superRareSoldPatch: SuperRareSoldPatch!
  id: String!
}

"""All input for the `updateSuperRareSold` mutation."""
input UpdateSuperRareSoldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareSold` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareSold` being updated.
  """
  superRareSoldPatch: SuperRareSoldPatch!
}

"""The output of our update `SuperRareSold` mutation."""
type UpdateSuperRareSoldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareSold` that was updated by this mutation."""
  superRareSold: SuperRareSold

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareSold`."""
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserBySeller: EthAddressUser

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareSold`.
  """
  ethAddressUserByBuyer: EthAddressUser

  """Reads a single `EventDetail` that is related to this `SuperRareSold`."""
  eventDetailById: EventDetail

  """An edge for our `SuperRareSold`. May be used by Relay 1."""
  superRareSoldEdge(
    """The method to use when ordering `SuperRareSold`."""
    orderBy: [SuperRareSoldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareSoldsEdge
}

"""All input for the `updateSuperRareTagByTokenIdAndName` mutation."""
input UpdateSuperRareTagByTokenIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareTag` being updated.
  """
  superRareTagPatch: SuperRareTagPatch!
  tokenId: Float!
  name: String!
}

"""The output of our update `SuperRareTag` mutation."""
type UpdateSuperRareTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareTag` that was updated by this mutation."""
  superRareTag: SuperRareTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Erc721Token` that is related to this `SuperRareTag`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `SuperRareTag`. May be used by Relay 1."""
  superRareTagEdge(
    """The method to use when ordering `SuperRareTag`."""
    orderBy: [SuperRareTagsOrderBy!] = [NATURAL]
  ): SuperRareTagsEdge
}

"""All input for the `updateSuperRareTokenCreatorByTokenId` mutation."""
input UpdateSuperRareTokenCreatorByTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SuperRareTokenCreator` being updated.
  """
  superRareTokenCreatorPatch: SuperRareTokenCreatorPatch!
  tokenId: Float!
}

"""All input for the `updateSuperRareTokenCreator` mutation."""
input UpdateSuperRareTokenCreatorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SuperRareTokenCreator` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SuperRareTokenCreator` being updated.
  """
  superRareTokenCreatorPatch: SuperRareTokenCreatorPatch!
}

"""The output of our update `SuperRareTokenCreator` mutation."""
type UpdateSuperRareTokenCreatorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SuperRareTokenCreator` that was updated by this mutation."""
  superRareTokenCreator: SuperRareTokenCreator

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Erc721Token` that is related to this `SuperRareTokenCreator`.
  """
  erc721TokenByTokenId: Erc721Token

  """
  Reads a single `EthAddressUser` that is related to this `SuperRareTokenCreator`.
  """
  ethAddressUserByAddress: EthAddressUser

  """An edge for our `SuperRareTokenCreator`. May be used by Relay 1."""
  superRareTokenCreatorEdge(
    """The method to use when ordering `SuperRareTokenCreator`."""
    orderBy: [SuperRareTokenCreatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SuperRareTokenCreatorsEdge
}

"""All input for the `updateTokenLikeByAddressAndTokenId` mutation."""
input UpdateTokenLikeByAddressAndTokenIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TokenLike` being updated.
  """
  tokenLikePatch: TokenLikePatch!
  address: String!
  tokenId: Float!
}

"""All input for the `updateTokenLike` mutation."""
input UpdateTokenLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TokenLike` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TokenLike` being updated.
  """
  tokenLikePatch: TokenLikePatch!
}

"""The output of our update `TokenLike` mutation."""
type UpdateTokenLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TokenLike` that was updated by this mutation."""
  tokenLike: TokenLike

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `EthAddressUser` that is related to this `TokenLike`."""
  ethAddressUserByAddress: EthAddressUser

  """Reads a single `Erc721Token` that is related to this `TokenLike`."""
  erc721TokenByTokenId: Erc721Token

  """An edge for our `TokenLike`. May be used by Relay 1."""
  tokenLikeEdge(
    """The method to use when ordering `TokenLike`."""
    orderBy: [TokenLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TokenLikesEdge
}

"""All input for the `updateUserAppNotificationById` mutation."""
input UpdateUserAppNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAppNotification` being updated.
  """
  userAppNotificationPatch: UserAppNotificationPatch!

  """Unique id notification"""
  id: BigInt!
}

"""All input for the `updateUserAppNotification` mutation."""
input UpdateUserAppNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAppNotification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAppNotification` being updated.
  """
  userAppNotificationPatch: UserAppNotificationPatch!
}

"""The output of our update `UserAppNotification` mutation."""
type UpdateUserAppNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAppNotification` that was updated by this mutation."""
  userAppNotification: UserAppNotification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAppNotification`."""
  userByUserId: User

  """An edge for our `UserAppNotification`. May be used by Relay 1."""
  userAppNotificationEdge(
    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAppNotificationsEdge
}

"""All input for the `updateUserByEthaddress` mutation."""
input UpdateUserByEthaddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  ethaddress: String!
}

"""All input for the `updateUserByEthereumAddress` mutation."""
input UpdateUserByEthereumAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  ethereumAddress: String!
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: BigInt!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""All input for the `updateUserNotificationSettingById` mutation."""
input UpdateUserNotificationSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserNotificationSetting` being updated.
  """
  userNotificationSettingPatch: UserNotificationSettingPatch!

  """Unique id of the notification settings"""
  id: BigInt!
}

"""All input for the `updateUserNotificationSettingByUserId` mutation."""
input UpdateUserNotificationSettingByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserNotificationSetting` being updated.
  """
  userNotificationSettingPatch: UserNotificationSettingPatch!

  """The user id the settings are for"""
  userId: BigInt!
}

"""All input for the `updateUserNotificationSetting` mutation."""
input UpdateUserNotificationSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserNotificationSetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserNotificationSetting` being updated.
  """
  userNotificationSettingPatch: UserNotificationSettingPatch!
}

"""The output of our update `UserNotificationSetting` mutation."""
type UpdateUserNotificationSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserNotificationSetting` that was updated by this mutation."""
  userNotificationSetting: UserNotificationSetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `UserNotificationSetting`.
  """
  userByUserId: User

  """An edge for our `UserNotificationSetting`. May be used by Relay 1."""
  userNotificationSettingEdge(
    """The method to use when ordering `UserNotificationSetting`."""
    orderBy: [UserNotificationSettingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserNotificationSettingsEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserTrackingByRefidAndTokenid` mutation."""
input UpdateUserTrackingByRefidAndTokenidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserTracking` being updated.
  """
  userTrackingPatch: UserTrackingPatch!
  refid: String!
  tokenid: Float!
}

"""All input for the `updateUserTracking` mutation."""
input UpdateUserTrackingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserTracking` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserTracking` being updated.
  """
  userTrackingPatch: UserTrackingPatch!
}

"""The output of our update `UserTracking` mutation."""
type UpdateUserTrackingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserTracking` that was updated by this mutation."""
  userTracking: UserTracking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserTracking`. May be used by Relay 1."""
  userTrackingEdge(
    """The method to use when ordering `UserTracking`."""
    orderBy: [UserTrackingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserTrackingsEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  email: String!
  username: String!
  ethaddress: String!
  fullname: String
  location: String
  bio: String
  isverified: Boolean
  avatar: String
  website: String
  instagramlink: String
  twitterlink: String
  steemitlink: String
  spotifylink: String
  soundcloudlink: String
  createdat: Datetime
  ethereumAddress: String!
  id: BigInt!
  createdAt: Datetime!
  instagramUrl: String
  cryptovoxelsUrl: String
  noiseFilter: Boolean!
  browserNotifications: Boolean!

  """Reads and enables pagination through a set of `UserAppNotification`."""
  userAppNotificationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAppNotification`."""
    orderBy: [UserAppNotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAppNotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAppNotificationFilter
  ): UserAppNotificationsConnection!

  """Reads a single `EthAddressUser` that is related to this `User`."""
  ethAddressUserByUserAddress: EthAddressUser

  """Reads and enables pagination through a set of `EthAddressUser`."""
  ethAddressUsersByUserAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EthAddressUser`."""
    orderBy: [EthAddressUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EthAddressUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EthAddressUserFilter
  ): EthAddressUsersConnection! @deprecated(reason: "Please use ethAddressUserByUserAddress instead")

  """Reads and enables pagination through a set of `NftLike`."""
  nftLikesByAddress(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftLike`."""
    orderBy: [NftLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftLikeFilter
  ): NftLikesConnection!

  """Reads and enables pagination through a set of `SentEmailNotification`."""
  sentEmailNotificationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SentEmailNotification`."""
    orderBy: [SentEmailNotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SentEmailNotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SentEmailNotificationFilter
  ): SentEmailNotificationsConnection!

  """
  Reads a single `UserNotificationSetting` that is related to this `User`.
  """
  userNotificationSettingByUserId: UserNotificationSetting

  """
  Reads and enables pagination through a set of `UserNotificationSetting`.
  """
  userNotificationSettingsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserNotificationSetting`."""
    orderBy: [UserNotificationSettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserNotificationSettingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserNotificationSettingFilter
  ): UserNotificationSettingsConnection! @deprecated(reason: "Please use userNotificationSettingByUserId instead")
}

"""User App Notification"""
type UserAppNotification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique id notification"""
  id: BigInt!

  """The user id for whom the notificaiton is for"""
  userId: BigInt!

  """Whether to the notification has been read"""
  hasBeenRead: Boolean!

  """A JSON blob of the content for the notification"""
  content: JSON!

  """The type of the notificaiton, useful for parsing"""
  notificationType: UserNotificationType!

  """When the notification occurred"""
  createdTimestamp: Datetime!

  """When the notification was read"""
  readTimestamp: Datetime!

  """Reads a single `User` that is related to this `UserAppNotification`."""
  userByUserId: User
}

"""
A condition to be used against `UserAppNotification` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input UserAppNotificationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt

  """Checks for equality with the object’s `hasBeenRead` field."""
  hasBeenRead: Boolean

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `notificationType` field."""
  notificationType: UserNotificationType

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `readTimestamp` field."""
  readTimestamp: Datetime
}

"""
A filter to be used against `UserAppNotification` object types. All fields are combined with a logical ‘and.’
"""
input UserAppNotificationFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter

  """Filter by the object’s `hasBeenRead` field."""
  hasBeenRead: BooleanFilter

  """Filter by the object’s `content` field."""
  content: JSONFilter

  """Filter by the object’s `notificationType` field."""
  notificationType: UserNotificationTypeFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `readTimestamp` field."""
  readTimestamp: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserAppNotificationFilter!]

  """Checks for any expressions in this list."""
  or: [UserAppNotificationFilter!]

  """Negates the expression."""
  not: UserAppNotificationFilter
}

"""An input for mutations affecting `UserAppNotification`"""
input UserAppNotificationInput {
  """Unique id notification"""
  id: BigInt

  """The user id for whom the notificaiton is for"""
  userId: BigInt!

  """Whether to the notification has been read"""
  hasBeenRead: Boolean

  """A JSON blob of the content for the notification"""
  content: JSON!

  """The type of the notificaiton, useful for parsing"""
  notificationType: UserNotificationType!

  """When the notification occurred"""
  createdTimestamp: Datetime

  """When the notification was read"""
  readTimestamp: Datetime
}

"""
Represents an update to a `UserAppNotification`. Fields that are set will be updated.
"""
input UserAppNotificationPatch {
  """Unique id notification"""
  id: BigInt

  """The user id for whom the notificaiton is for"""
  userId: BigInt

  """Whether to the notification has been read"""
  hasBeenRead: Boolean

  """A JSON blob of the content for the notification"""
  content: JSON

  """The type of the notificaiton, useful for parsing"""
  notificationType: UserNotificationType

  """When the notification occurred"""
  createdTimestamp: Datetime

  """When the notification was read"""
  readTimestamp: Datetime
}

"""A connection to a list of `UserAppNotification` values."""
type UserAppNotificationsConnection {
  """A list of `UserAppNotification` objects."""
  nodes: [UserAppNotification]!

  """
  A list of edges which contains the `UserAppNotification` and cursor to aid in pagination.
  """
  edges: [UserAppNotificationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAppNotification` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserAppNotification` edge in the connection."""
type UserAppNotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAppNotification` at the end of the edge."""
  node: UserAppNotification
}

"""Methods to use when ordering `UserAppNotification`."""
enum UserAppNotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  HAS_BEEN_READ_ASC
  HAS_BEEN_READ_DESC
  CONTENT_ASC
  CONTENT_DESC
  NOTIFICATION_TYPE_ASC
  NOTIFICATION_TYPE_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  READ_TIMESTAMP_ASC
  READ_TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__EMAIL_ASC
  USER_BY_USER_ID__EMAIL_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__ETHADDRESS_ASC
  USER_BY_USER_ID__ETHADDRESS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__LOCATION_ASC
  USER_BY_USER_ID__LOCATION_DESC
  USER_BY_USER_ID__BIO_ASC
  USER_BY_USER_ID__BIO_DESC
  USER_BY_USER_ID__ISVERIFIED_ASC
  USER_BY_USER_ID__ISVERIFIED_DESC
  USER_BY_USER_ID__AVATAR_ASC
  USER_BY_USER_ID__AVATAR_DESC
  USER_BY_USER_ID__WEBSITE_ASC
  USER_BY_USER_ID__WEBSITE_DESC
  USER_BY_USER_ID__INSTAGRAMLINK_ASC
  USER_BY_USER_ID__INSTAGRAMLINK_DESC
  USER_BY_USER_ID__TWITTERLINK_ASC
  USER_BY_USER_ID__TWITTERLINK_DESC
  USER_BY_USER_ID__STEEMITLINK_ASC
  USER_BY_USER_ID__STEEMITLINK_DESC
  USER_BY_USER_ID__SPOTIFYLINK_ASC
  USER_BY_USER_ID__SPOTIFYLINK_DESC
  USER_BY_USER_ID__SOUNDCLOUDLINK_ASC
  USER_BY_USER_ID__SOUNDCLOUDLINK_DESC
  USER_BY_USER_ID__CREATEDAT_ASC
  USER_BY_USER_ID__CREATEDAT_DESC
  USER_BY_USER_ID__ETHEREUM_ADDRESS_ASC
  USER_BY_USER_ID__ETHEREUM_ADDRESS_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__CREATED_AT_ASC
  USER_BY_USER_ID__CREATED_AT_DESC
  USER_BY_USER_ID__INSTAGRAM_URL_ASC
  USER_BY_USER_ID__INSTAGRAM_URL_DESC
  USER_BY_USER_ID__CRYPTOVOXELS_URL_ASC
  USER_BY_USER_ID__CRYPTOVOXELS_URL_DESC
  USER_BY_USER_ID__NOISE_FILTER_ASC
  USER_BY_USER_ID__NOISE_FILTER_DESC
  USER_BY_USER_ID__BROWSER_NOTIFICATIONS_ASC
  USER_BY_USER_ID__BROWSER_NOTIFICATIONS_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `ethaddress` field."""
  ethaddress: String

  """Checks for equality with the object’s `fullname` field."""
  fullname: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `isverified` field."""
  isverified: Boolean

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `website` field."""
  website: String

  """Checks for equality with the object’s `instagramlink` field."""
  instagramlink: String

  """Checks for equality with the object’s `twitterlink` field."""
  twitterlink: String

  """Checks for equality with the object’s `steemitlink` field."""
  steemitlink: String

  """Checks for equality with the object’s `spotifylink` field."""
  spotifylink: String

  """Checks for equality with the object’s `soundcloudlink` field."""
  soundcloudlink: String

  """Checks for equality with the object’s `createdat` field."""
  createdat: Datetime

  """Checks for equality with the object’s `ethereumAddress` field."""
  ethereumAddress: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `instagramUrl` field."""
  instagramUrl: String

  """Checks for equality with the object’s `cryptovoxelsUrl` field."""
  cryptovoxelsUrl: String

  """Checks for equality with the object’s `noiseFilter` field."""
  noiseFilter: Boolean

  """Checks for equality with the object’s `browserNotifications` field."""
  browserNotifications: Boolean
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `ethaddress` field."""
  ethaddress: StringFilter

  """Filter by the object’s `fullname` field."""
  fullname: StringFilter

  """Filter by the object’s `location` field."""
  location: StringFilter

  """Filter by the object’s `bio` field."""
  bio: StringFilter

  """Filter by the object’s `isverified` field."""
  isverified: BooleanFilter

  """Filter by the object’s `avatar` field."""
  avatar: StringFilter

  """Filter by the object’s `website` field."""
  website: StringFilter

  """Filter by the object’s `instagramlink` field."""
  instagramlink: StringFilter

  """Filter by the object’s `twitterlink` field."""
  twitterlink: StringFilter

  """Filter by the object’s `steemitlink` field."""
  steemitlink: StringFilter

  """Filter by the object’s `spotifylink` field."""
  spotifylink: StringFilter

  """Filter by the object’s `soundcloudlink` field."""
  soundcloudlink: StringFilter

  """Filter by the object’s `createdat` field."""
  createdat: DatetimeFilter

  """Filter by the object’s `ethereumAddress` field."""
  ethereumAddress: StringFilter

  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `instagramUrl` field."""
  instagramUrl: StringFilter

  """Filter by the object’s `cryptovoxelsUrl` field."""
  cryptovoxelsUrl: StringFilter

  """Filter by the object’s `noiseFilter` field."""
  noiseFilter: BooleanFilter

  """Filter by the object’s `browserNotifications` field."""
  browserNotifications: BooleanFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""An input for mutations affecting `User`"""
input UserInput {
  email: String!
  username: String!
  ethaddress: String!
  fullname: String
  location: String
  bio: String
  isverified: Boolean
  avatar: String
  website: String
  instagramlink: String
  twitterlink: String
  steemitlink: String
  spotifylink: String
  soundcloudlink: String
  createdat: Datetime
  ethereumAddress: String!
  id: BigInt
  createdAt: Datetime
  instagramUrl: String
  cryptovoxelsUrl: String
  noiseFilter: Boolean
  browserNotifications: Boolean
}

"""User settings for notifications"""
type UserNotificationSetting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Unique id of the notification settings"""
  id: BigInt!

  """The user id the settings are for"""
  userId: BigInt!

  """Whether to send email to receiver of gift"""
  emailGiftReceiver: Boolean!

  """Whether to send email to sender of gift"""
  emailGiftSender: Boolean!

  """Whether to send email to bidder for their bid"""
  emailBidBidder: Boolean!

  """Whether to send email to owner when a bid occurs"""
  emailBidOwner: Boolean!

  """Whether to send email when outbid"""
  emailBidOutbid: Boolean!

  """Whether to send email to bidder when bid was accepted"""
  emailAcceptBidBidder: Boolean!

  """Whether to send email to seller when bid was accepted"""
  emailAcceptBidSeller: Boolean!

  """Whether to send email to buyer when they purchase"""
  emailSoldBuyer: Boolean!

  """Whether to send email seller when they have sold"""
  emailSoldSeller: Boolean!

  """Whether to send email to owner bid was canceled"""
  emailCancelBidOwner: Boolean!
  emailRoyalty: Boolean!

  """Whether to notify the owner when a bid occurs"""
  appBidOwner: Boolean!

  """
  Reads a single `User` that is related to this `UserNotificationSetting`.
  """
  userByUserId: User
}

"""
A condition to be used against `UserNotificationSetting` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input UserNotificationSettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt

  """Checks for equality with the object’s `emailGiftReceiver` field."""
  emailGiftReceiver: Boolean

  """Checks for equality with the object’s `emailGiftSender` field."""
  emailGiftSender: Boolean

  """Checks for equality with the object’s `emailBidBidder` field."""
  emailBidBidder: Boolean

  """Checks for equality with the object’s `emailBidOwner` field."""
  emailBidOwner: Boolean

  """Checks for equality with the object’s `emailBidOutbid` field."""
  emailBidOutbid: Boolean

  """Checks for equality with the object’s `emailAcceptBidBidder` field."""
  emailAcceptBidBidder: Boolean

  """Checks for equality with the object’s `emailAcceptBidSeller` field."""
  emailAcceptBidSeller: Boolean

  """Checks for equality with the object’s `emailSoldBuyer` field."""
  emailSoldBuyer: Boolean

  """Checks for equality with the object’s `emailSoldSeller` field."""
  emailSoldSeller: Boolean

  """Checks for equality with the object’s `emailCancelBidOwner` field."""
  emailCancelBidOwner: Boolean

  """Checks for equality with the object’s `emailRoyalty` field."""
  emailRoyalty: Boolean

  """Checks for equality with the object’s `appBidOwner` field."""
  appBidOwner: Boolean
}

"""
A filter to be used against `UserNotificationSetting` object types. All fields are combined with a logical ‘and.’
"""
input UserNotificationSettingFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `userId` field."""
  userId: BigIntFilter

  """Filter by the object’s `emailGiftReceiver` field."""
  emailGiftReceiver: BooleanFilter

  """Filter by the object’s `emailGiftSender` field."""
  emailGiftSender: BooleanFilter

  """Filter by the object’s `emailBidBidder` field."""
  emailBidBidder: BooleanFilter

  """Filter by the object’s `emailBidOwner` field."""
  emailBidOwner: BooleanFilter

  """Filter by the object’s `emailBidOutbid` field."""
  emailBidOutbid: BooleanFilter

  """Filter by the object’s `emailAcceptBidBidder` field."""
  emailAcceptBidBidder: BooleanFilter

  """Filter by the object’s `emailAcceptBidSeller` field."""
  emailAcceptBidSeller: BooleanFilter

  """Filter by the object’s `emailSoldBuyer` field."""
  emailSoldBuyer: BooleanFilter

  """Filter by the object’s `emailSoldSeller` field."""
  emailSoldSeller: BooleanFilter

  """Filter by the object’s `emailCancelBidOwner` field."""
  emailCancelBidOwner: BooleanFilter

  """Filter by the object’s `emailRoyalty` field."""
  emailRoyalty: BooleanFilter

  """Filter by the object’s `appBidOwner` field."""
  appBidOwner: BooleanFilter

  """Checks for all expressions in this list."""
  and: [UserNotificationSettingFilter!]

  """Checks for any expressions in this list."""
  or: [UserNotificationSettingFilter!]

  """Negates the expression."""
  not: UserNotificationSettingFilter
}

"""An input for mutations affecting `UserNotificationSetting`"""
input UserNotificationSettingInput {
  """Unique id of the notification settings"""
  id: BigInt

  """The user id the settings are for"""
  userId: BigInt!

  """Whether to send email to receiver of gift"""
  emailGiftReceiver: Boolean

  """Whether to send email to sender of gift"""
  emailGiftSender: Boolean

  """Whether to send email to bidder for their bid"""
  emailBidBidder: Boolean

  """Whether to send email to owner when a bid occurs"""
  emailBidOwner: Boolean

  """Whether to send email when outbid"""
  emailBidOutbid: Boolean

  """Whether to send email to bidder when bid was accepted"""
  emailAcceptBidBidder: Boolean

  """Whether to send email to seller when bid was accepted"""
  emailAcceptBidSeller: Boolean

  """Whether to send email to buyer when they purchase"""
  emailSoldBuyer: Boolean

  """Whether to send email seller when they have sold"""
  emailSoldSeller: Boolean

  """Whether to send email to owner bid was canceled"""
  emailCancelBidOwner: Boolean
  emailRoyalty: Boolean

  """Whether to notify the owner when a bid occurs"""
  appBidOwner: Boolean
}

"""
Represents an update to a `UserNotificationSetting`. Fields that are set will be updated.
"""
input UserNotificationSettingPatch {
  """Unique id of the notification settings"""
  id: BigInt

  """The user id the settings are for"""
  userId: BigInt

  """Whether to send email to receiver of gift"""
  emailGiftReceiver: Boolean

  """Whether to send email to sender of gift"""
  emailGiftSender: Boolean

  """Whether to send email to bidder for their bid"""
  emailBidBidder: Boolean

  """Whether to send email to owner when a bid occurs"""
  emailBidOwner: Boolean

  """Whether to send email when outbid"""
  emailBidOutbid: Boolean

  """Whether to send email to bidder when bid was accepted"""
  emailAcceptBidBidder: Boolean

  """Whether to send email to seller when bid was accepted"""
  emailAcceptBidSeller: Boolean

  """Whether to send email to buyer when they purchase"""
  emailSoldBuyer: Boolean

  """Whether to send email seller when they have sold"""
  emailSoldSeller: Boolean

  """Whether to send email to owner bid was canceled"""
  emailCancelBidOwner: Boolean
  emailRoyalty: Boolean

  """Whether to notify the owner when a bid occurs"""
  appBidOwner: Boolean
}

"""A connection to a list of `UserNotificationSetting` values."""
type UserNotificationSettingsConnection {
  """A list of `UserNotificationSetting` objects."""
  nodes: [UserNotificationSetting]!

  """
  A list of edges which contains the `UserNotificationSetting` and cursor to aid in pagination.
  """
  edges: [UserNotificationSettingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserNotificationSetting` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserNotificationSetting` edge in the connection."""
type UserNotificationSettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserNotificationSetting` at the end of the edge."""
  node: UserNotificationSetting
}

"""Methods to use when ordering `UserNotificationSetting`."""
enum UserNotificationSettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_GIFT_RECEIVER_ASC
  EMAIL_GIFT_RECEIVER_DESC
  EMAIL_GIFT_SENDER_ASC
  EMAIL_GIFT_SENDER_DESC
  EMAIL_BID_BIDDER_ASC
  EMAIL_BID_BIDDER_DESC
  EMAIL_BID_OWNER_ASC
  EMAIL_BID_OWNER_DESC
  EMAIL_BID_OUTBID_ASC
  EMAIL_BID_OUTBID_DESC
  EMAIL_ACCEPT_BID_BIDDER_ASC
  EMAIL_ACCEPT_BID_BIDDER_DESC
  EMAIL_ACCEPT_BID_SELLER_ASC
  EMAIL_ACCEPT_BID_SELLER_DESC
  EMAIL_SOLD_BUYER_ASC
  EMAIL_SOLD_BUYER_DESC
  EMAIL_SOLD_SELLER_ASC
  EMAIL_SOLD_SELLER_DESC
  EMAIL_CANCEL_BID_OWNER_ASC
  EMAIL_CANCEL_BID_OWNER_DESC
  EMAIL_ROYALTY_ASC
  EMAIL_ROYALTY_DESC
  APP_BID_OWNER_ASC
  APP_BID_OWNER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_BY_USER_ID__EMAIL_ASC
  USER_BY_USER_ID__EMAIL_DESC
  USER_BY_USER_ID__USERNAME_ASC
  USER_BY_USER_ID__USERNAME_DESC
  USER_BY_USER_ID__ETHADDRESS_ASC
  USER_BY_USER_ID__ETHADDRESS_DESC
  USER_BY_USER_ID__FULLNAME_ASC
  USER_BY_USER_ID__FULLNAME_DESC
  USER_BY_USER_ID__LOCATION_ASC
  USER_BY_USER_ID__LOCATION_DESC
  USER_BY_USER_ID__BIO_ASC
  USER_BY_USER_ID__BIO_DESC
  USER_BY_USER_ID__ISVERIFIED_ASC
  USER_BY_USER_ID__ISVERIFIED_DESC
  USER_BY_USER_ID__AVATAR_ASC
  USER_BY_USER_ID__AVATAR_DESC
  USER_BY_USER_ID__WEBSITE_ASC
  USER_BY_USER_ID__WEBSITE_DESC
  USER_BY_USER_ID__INSTAGRAMLINK_ASC
  USER_BY_USER_ID__INSTAGRAMLINK_DESC
  USER_BY_USER_ID__TWITTERLINK_ASC
  USER_BY_USER_ID__TWITTERLINK_DESC
  USER_BY_USER_ID__STEEMITLINK_ASC
  USER_BY_USER_ID__STEEMITLINK_DESC
  USER_BY_USER_ID__SPOTIFYLINK_ASC
  USER_BY_USER_ID__SPOTIFYLINK_DESC
  USER_BY_USER_ID__SOUNDCLOUDLINK_ASC
  USER_BY_USER_ID__SOUNDCLOUDLINK_DESC
  USER_BY_USER_ID__CREATEDAT_ASC
  USER_BY_USER_ID__CREATEDAT_DESC
  USER_BY_USER_ID__ETHEREUM_ADDRESS_ASC
  USER_BY_USER_ID__ETHEREUM_ADDRESS_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__CREATED_AT_ASC
  USER_BY_USER_ID__CREATED_AT_DESC
  USER_BY_USER_ID__INSTAGRAM_URL_ASC
  USER_BY_USER_ID__INSTAGRAM_URL_DESC
  USER_BY_USER_ID__CRYPTOVOXELS_URL_ASC
  USER_BY_USER_ID__CRYPTOVOXELS_URL_DESC
  USER_BY_USER_ID__NOISE_FILTER_ASC
  USER_BY_USER_ID__NOISE_FILTER_DESC
  USER_BY_USER_ID__BROWSER_NOTIFICATIONS_ASC
  USER_BY_USER_ID__BROWSER_NOTIFICATIONS_DESC
}

enum UserNotificationType {
  GIFT_RECEIVER
  GIFT_SENDER
  BID_BIDDER
  BID_OWNER
  BID_OUTBID
  ACCEPT_BID_SELLER
  ACCEPT_BID_BIDDER
  SOLD_SELLER
  SOLD_BUYER
  SET_SALE_PRICE_OWNER
  NEW_USER
  FOLLOW_UP_NEW_USER
  CANCEL_BID_BIDDER
  CANCEL_BID_OWNER
  ROYALTY
}

"""
A filter to be used against UserNotificationType fields. All fields are combined with a logical ‘and.’
"""
input UserNotificationTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UserNotificationType

  """Not equal to the specified value."""
  notEqualTo: UserNotificationType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UserNotificationType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UserNotificationType

  """Included in the specified list."""
  in: [UserNotificationType!]

  """Not included in the specified list."""
  notIn: [UserNotificationType!]

  """Less than the specified value."""
  lessThan: UserNotificationType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UserNotificationType

  """Greater than the specified value."""
  greaterThan: UserNotificationType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UserNotificationType
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  email: String
  username: String
  ethaddress: String
  fullname: String
  location: String
  bio: String
  isverified: Boolean
  avatar: String
  website: String
  instagramlink: String
  twitterlink: String
  steemitlink: String
  spotifylink: String
  soundcloudlink: String
  createdat: Datetime
  ethereumAddress: String
  id: BigInt
  createdAt: Datetime
  instagramUrl: String
  cryptovoxelsUrl: String
  noiseFilter: Boolean
  browserNotifications: Boolean
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  EMAIL_ASC
  EMAIL_DESC
  USERNAME_ASC
  USERNAME_DESC
  ETHADDRESS_ASC
  ETHADDRESS_DESC
  FULLNAME_ASC
  FULLNAME_DESC
  LOCATION_ASC
  LOCATION_DESC
  BIO_ASC
  BIO_DESC
  ISVERIFIED_ASC
  ISVERIFIED_DESC
  AVATAR_ASC
  AVATAR_DESC
  WEBSITE_ASC
  WEBSITE_DESC
  INSTAGRAMLINK_ASC
  INSTAGRAMLINK_DESC
  TWITTERLINK_ASC
  TWITTERLINK_DESC
  STEEMITLINK_ASC
  STEEMITLINK_DESC
  SPOTIFYLINK_ASC
  SPOTIFYLINK_DESC
  SOUNDCLOUDLINK_ASC
  SOUNDCLOUDLINK_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  ETHEREUM_ADDRESS_ASC
  ETHEREUM_ADDRESS_DESC
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  INSTAGRAM_URL_ASC
  INSTAGRAM_URL_DESC
  CRYPTOVOXELS_URL_ASC
  CRYPTOVOXELS_URL_DESC
  NOISE_FILTER_ASC
  NOISE_FILTER_DESC
  BROWSER_NOTIFICATIONS_ASC
  BROWSER_NOTIFICATIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_APP_NOTIFICATIONS_BY_USER_ID__COUNT_ASC
  USER_APP_NOTIFICATIONS_BY_USER_ID__COUNT_DESC
  ETH_ADDRESS_USER_BY_USER_ADDRESS__USER_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_USER_ADDRESS__USER_ADDRESS_DESC
  ETH_ADDRESS_USER_BY_USER_ADDRESS__ETH_ADDRESS_ASC
  ETH_ADDRESS_USER_BY_USER_ADDRESS__ETH_ADDRESS_DESC
  NFT_LIKES_BY_ADDRESS__COUNT_ASC
  NFT_LIKES_BY_ADDRESS__COUNT_DESC
  SENT_EMAIL_NOTIFICATIONS_BY_USER_ID__COUNT_ASC
  SENT_EMAIL_NOTIFICATIONS_BY_USER_ID__COUNT_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__ID_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__ID_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__USER_ID_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__USER_ID_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_GIFT_RECEIVER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_GIFT_RECEIVER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_GIFT_SENDER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_GIFT_SENDER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_BID_BIDDER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_BID_BIDDER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_BID_OWNER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_BID_OWNER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_BID_OUTBID_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_BID_OUTBID_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_ACCEPT_BID_BIDDER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_ACCEPT_BID_BIDDER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_ACCEPT_BID_SELLER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_ACCEPT_BID_SELLER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_SOLD_BUYER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_SOLD_BUYER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_SOLD_SELLER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_SOLD_SELLER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_CANCEL_BID_OWNER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_CANCEL_BID_OWNER_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_ROYALTY_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__EMAIL_ROYALTY_DESC
  USER_NOTIFICATION_SETTING_BY_USER_ID__APP_BID_OWNER_ASC
  USER_NOTIFICATION_SETTING_BY_USER_ID__APP_BID_OWNER_DESC
}

type UserTracking implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  refid: String!
  type: String!
  tokenid: Float!
  numviews: Int
  hasliked: Boolean
  datecreated: Datetime!
}

"""
A condition to be used against `UserTracking` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserTrackingCondition {
  """Checks for equality with the object’s `refid` field."""
  refid: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `tokenid` field."""
  tokenid: Float

  """Checks for equality with the object’s `numviews` field."""
  numviews: Int

  """Checks for equality with the object’s `hasliked` field."""
  hasliked: Boolean

  """Checks for equality with the object’s `datecreated` field."""
  datecreated: Datetime
}

"""
A filter to be used against `UserTracking` object types. All fields are combined with a logical ‘and.’
"""
input UserTrackingFilter {
  """Filter by the object’s `refid` field."""
  refid: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `tokenid` field."""
  tokenid: FloatFilter

  """Filter by the object’s `numviews` field."""
  numviews: IntFilter

  """Filter by the object’s `hasliked` field."""
  hasliked: BooleanFilter

  """Filter by the object’s `datecreated` field."""
  datecreated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserTrackingFilter!]

  """Checks for any expressions in this list."""
  or: [UserTrackingFilter!]

  """Negates the expression."""
  not: UserTrackingFilter
}

"""An input for mutations affecting `UserTracking`"""
input UserTrackingInput {
  refid: String!
  type: String!
  tokenid: Float!
  numviews: Int
  hasliked: Boolean
  datecreated: Datetime
}

"""
Represents an update to a `UserTracking`. Fields that are set will be updated.
"""
input UserTrackingPatch {
  refid: String
  type: String
  tokenid: Float
  numviews: Int
  hasliked: Boolean
  datecreated: Datetime
}

"""A connection to a list of `UserTracking` values."""
type UserTrackingsConnection {
  """A list of `UserTracking` objects."""
  nodes: [UserTracking]!

  """
  A list of edges which contains the `UserTracking` and cursor to aid in pagination.
  """
  edges: [UserTrackingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserTracking` you could get from the connection."""
  totalCount: Int!
}

"""A `UserTracking` edge in the connection."""
type UserTrackingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserTracking` at the end of the edge."""
  node: UserTracking
}

"""Methods to use when ordering `UserTracking`."""
enum UserTrackingsOrderBy {
  NATURAL
  REFID_ASC
  REFID_DESC
  TYPE_ASC
  TYPE_DESC
  TOKENID_ASC
  TOKENID_DESC
  NUMVIEWS_ASC
  NUMVIEWS_DESC
  HASLIKED_ASC
  HASLIKED_DESC
  DATECREATED_ASC
  DATECREATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}